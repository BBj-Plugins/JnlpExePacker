use java.net.URL
use org.apache.commons.io.FileUtils

use java.io.BufferedReader
use java.io.ByteArrayOutputStream
use java.io.File
use java.io.FileOutputStream
use java.io.FileReader

use java.util.zip.ZipEntry
use java.io.FileInputStream
use java.util.zip.ZipInputStream


use ::src/configuration/BuildSettingsIF.bbj::BuildSettingsIF
use ::src/configuration/ExeConfiguration.bbj::ExeApplicationConfiguration
use ::src/configuration/OSSpecificSettings.bbj::OSSpecificSettings
use ::src/configuration/PackageBuildSettings.bbj::PackageBuildSettings

use ::src/ArchiveFileExtractor.bbj::ArchiveFileExtractor
use ::src/DownloadService.bbj::DownloadService
use ::src/JnlpApplicationDependencyManager.bbj::JnlpApplicationDependencyManager
use ::src/Logger.bbj::Logger

use com.google.gson.JsonArray
use com.google.gson.JsonElement
use com.google.gson.JsonObject
use com.google.gson.JsonParser
use com.google.gson.JsonPrimitive
use com.google.gson.stream.JsonWriter

use java.util.regex.Matcher
use java.util.regex.Pattern

use java.io.FileWriter

class public ExePackerCore

    field private Logger logger!

    field private static String TARGET_PLATFORM_MAC!     = "mac"
    field private static String TARGET_PLATFORM_LINUX!   = "linux"
    field private static String TARGET_PLATFORM_WINDOWS! = "windows"

    method public ExePackerCore()
        #logger! = Logger.getInstance()
    methodend

    method public void generateClientPackages(PackageBuildSettings settings!)
        #validateValues(settings!)

        rem Clear the output directory
        if settings!.isClearOutputDirectoryOptionEnabled() then
            #cleanOutputDirectory(settings!)
        endif

        declare BBjVector osSettings!
        declare OSSpecificSettings osSetting!
        osSettings! = settings!.getOSSpecificSettings()

        if osSettings! <> null() and !osSettings!.isEmpty() then
            for i=0 to osSettings!.size() -1
                osSetting! = cast(OSSpecificSettings, osSettings!.get(i))

                outputDirectory! = settings!.getOutputDirectory()
                osPackageDirectory! = new File(outputDirectory!, osSetting!.getOutputDirectoryName())

                rem Copy the JRE into the output folder        
                #copyJreDirectory(osSetting!, osPackageDirectory!)

                rem Download the native libraries
                #downloadNativeLibraries(settings!, osSetting!, osPackageDirectory!)

                rem donwload the jar dependencies
                #downloadJarDependencies(settings!, osSetting!, osPackageDirectory!)

                rem creates the launch.json file and copies the Executable to the output directory
                #generateExecutable(settings!, osSetting!, osPackageDirectory!)
            next i
        endif
    methodend

    rem Create the json 
    rem save the json into the launch.json file
    rem copy the executable to the output directory 
    method public void generateExecutable(PackageBuildSettings settings!, OSSpecificSettings osSettings!, File outputDirectory!)
        currentDir! = #getPackerDirectory().getParentFile().getAbsolutePath() + File.separator

        declare JsonObject jsonObject!
        jsonObject! = new JsonObject()

        rem default theming
        rem builder!.append("""-Djava.library.path=lib/native/"" ")

        rem Adding the java arguments 
        javaArguments! = new JsonArray()
        rem adding the native library path

        rem Set the java library path to 64 or 32bit if applicable
        rem Windows is the only OS that can have a 32bit open jdk
        libraryPath! = "-Djava.library.path=./lib/64"
        if osSettings!.getTargetOSName() = #TARGET_PLATFORM_WINDOWS! then
            if #is32BitJDK(outputDirectory!) then
                libraryPath! = "-Djava.library.path=./lib/32"
            endif
        endif
        javaArguments!.add(new JsonPrimitive(libraryPath!))
        
        rem If a JDK Version later than 9 is used, some module flags need to be set in order for the 
        rem executable to run properly.
        if #requiresModuleFlags(outputDirectory!)
            javaArguments!.add(new JsonPrimitive("--add-exports=java.base/jdk.internal.loader=ALL-UNNAMED"))
            javaArguments!.add(new JsonPrimitive("--add-opens=java.base/jdk.internal.loader=ALL-UNNAMED"))
        endif
        
        javaArgs! = settings!.getJvmArguments()
        if javaArgs! <> null() and !javaArgs!.isEmpty() then
            for i = 0 to javaArgs!.size() -1
                arg! = javaArgs!.get(i)
                jsonElement! = new JsonPrimitive(arg!)
                javaArguments!.add(jsonElement!)
            next i
        endif

        jsonObject!.add("java-arguments", javaArguments!)

        rem adding the bbj arguments
        jsonArray! = new JsonArray()
        args! = settings!.getBBjProgramArguments()
        if args! <> null() and !args!.isEmpty() then
            for i = 0 to args!.size() -1
                arg! = args!.get(i)
                jsonElement! = new JsonPrimitive(arg!)
                jsonArray!.add(jsonElement!)
            next i
        endif

        jsonObject!.add("bbj-arguments", jsonArray!)
        jsonObject!.addProperty("emulate-webstart", settings!.isEmulateWebstartOptionEnabled())
        jsonObject!.addProperty("set-user-id", settings!.getAutomaticallySetUserIDOption())
        jsonObject!.addProperty("debug", Boolean.FALSE)

        arr! = java.lang.reflect.Array.newInstance(Class.forName("java.nio.file.CopyOption"), 2)
        java.lang.reflect.Array.set(arr!, 0, cast(java.nio.file.CopyOption, java.nio.file.StandardCopyOption.COPY_ATTRIBUTES))
        java.lang.reflect.Array.set(arr!, 1, cast(java.nio.file.CopyOption, java.nio.file.LinkOption.NOFOLLOW_LINKS))

        switch osSettings!.getTargetOSName()
            case #TARGET_PLATFORM_MAC!     ; fileName! = "res/mac/JnlpExePacker"         ; break
            case #TARGET_PLATFORM_LINUX!   ; fileName! = "res/linux/JnlpExePacker"       ; break
            case #TARGET_PLATFORM_WINDOWS! ; fileName! = "res/windows/JnlpExePacker.exe" ; break
        swend

        rem if osSettings!.getTargetOSName() = "linux" then
        rem     genericExecutable! = new File(currentDir!, "res/linux/JnlpExePacker")
        rem else
        rem     if osSettings!.getTargetOSName() = "windows" then
        rem         genericExecutable! = new File(currentDir!, "res/windows/JnlpExePacker.exe")
        rem     else
        rem         genericExecutable! = new File(currentDir!, "res/mac/JnlpExePacker")
        rem     endif
        rem endif

        genericExecutable! = new File(currentDir!, fileName!)

        rem rename the executable to the desired name
        execFileName! = "executable.sh"
        if osSettings!.getExecutableFileName() <> null() then
            execFileName! = osSettings!.getExecutableFileName()
        endif

        executable! = new File(outputDirectory!, execFileName!)

        rem copy the executable into the output directory and rename it if required
        java.nio.file.Files.copy(genericExecutable!.toPath(), executable!.toPath() , arr!)
        readable!   = genericExecutable!.setReadable(1, 0)
        writable!   = genericExecutable!.setWritable(1, 0)
        executable! = genericExecutable!.setExecutable(1, 0)

        if !readable! then
            #logger!.error("Failed to set readable flag for the executable")
        endif

        if !writable! then
            #logger!.error("Failed to set writable flag for the executable")
        endif

        if !executable! then
            #logger!.error("Failed to set executable flag for the executable")
        endif

        declare File launchJson!
        launchJson! = new File(outputDirectory!, "launch.json")
        launchJson!.createNewFile() 

        ch = unt 
        open(ch) launchJson!.getAbsolutePath()
        write(ch) jsonObject!.toString()
        close(ch)
    methodend

    rem /**
    rem  * On Linux and MacOS the OpenJDK is only available in a 64bit format. On Windows on the oter hand, 
    rem  * the user has the choice between 32 and 64bit. This method is used to identify if the selected 
    rem  * open JDK is a 32bit open JDK in order to set the correct native libraries in the launch.json.
    rem  * 
    rem  * The method returns true if the jre/release file in the given output directory has the OS_ARCH 
    rem  * property set to "x86" marking the jdk to be 32bit. False is returned if not.
    rem  * 
    rem  * @param outputDirectory! The packer's output directory in which the jre/release file can be found
    rem  * @return true if the jre/release file indicates if the open jdk is 32bit and false if not
    rem  */
    method private Boolean is32BitJDK(File outputDirectory!)
        declare Pattern pattern!
        declare Matcher matcher!
        declare File releaseFile!

        regex! = "^OS_ARCH=\""(.*)\""$"

        releaseFile! = new File(outputDirectory!, "jre/release")
        archString! = #getMatchingString(releaseFile!, regex!)

        if archString! = null() then
            #logger!.error("Failed to read the OS_ARCH property from the jre/release file")
            methodret Boolean.FALSE
        endif

        pattern! = Pattern.compile(regex!)      
        matcher! = pattern!.matcher(archString!)
        if !matcher!.find() then
            rem This should never happen
            #logger!.error("Failed to read the OS_ARCH string returned by the getMatchingString(File, String) method")
            methodret Boolean.FALSE
        endif

        arch! = matcher!.group(1)
        if arch! = "x86" then
            methodret Boolean.TRUE
        endif
    
        methodret Boolean.FALSE
    methodend
    
    rem /**
    rem  * Some BBj processes rely on some JDK internal API of a library module and therefore
    rem  * require some special flags to be set on startup. These flags should only be added/used
    rem  * with java version 9 or later. This method checks the version of the java directory packed
    rem  * into the output directory and returns true if these module flags should be added and false if not.
    rem  * 
    rem  * @param outputDirectory! The packer's output directory in which the jre/ can be found
    rem  * @return true if the open jdk version is newer than the version 8
    rem  */
    method public Boolean requiresModuleFlags(File outputDirectory!)
        declare Pattern pattern!
        declare Matcher matcher!
        declare File releaseFile!

        regex! = "^JAVA_VERSION=\""(.*)\""$"

        releaseFile! = new File(outputDirectory!, "jre/release")
        versionString! = #getMatchingString(releaseFile!, regex!)

        if versionString! = null() then
            #logger!.error("Failed to read the JAVA_VERSION property from the jre/release file")
            methodret Boolean.FALSE
        endif

        pattern! = Pattern.compile(regex!)      
        matcher! = pattern!.matcher(versionString!)
        if !matcher!.find() then
            rem This should never happen
            #logger!.error("Failed to read the JAVA_VERSION string returned by the getMatchingString(File, String) method")
            methodret Boolean.FALSE
        endif

        version! = matcher!.group(1)
        versionSplit! = java.util.Arrays.asList(version!.split("\."))
                
        rem Oracle JDK 1.8.0_202
        if num(versionSplit!.get(0)) = 1 AND num(versionSplit!.get(1)) > 8 then
            methodret Boolean.TRUE
        else
            rem OpenJDK 11.0.1
            if num(versionSplit!.get(0)) > 8 then
                methodret Boolean.TRUE
            endif
        endif 

        methodret Boolean.FALSE
    methodend

    rem /*
    rem  * The JnlpExePacker determines the user selected Open JDK by 
    rem  * parsing the jre/release property file. This method parses that file(first parameter) 
    rem  * using the given regular expression. It returns the first String matching the regular 
    rem  * expression from that file.
    rem  *
    rem  * @param file! The file to parse
    rem  * @param regex! The regular expression used to parse the file 
    rem  *
    rem  * @return the first string from the given file matching the regular expression
    rem  */
    method private String getMatchingString(File file!, String regex!)
        declare Pattern pattern!
        declare Matcher matcher!
        declare FileReader fileReader!
        declare BufferedReader reader!

        if !file!.exists() OR !file!.isFile() OR !file!.canRead() then
            methodret null()
        endif
        
        fileReader! = new FileReader(file!)
        reader! = new BufferedReader(fileReader!)
        
        pattern! = Pattern.compile(regex!)      
        match! = null()

        line! = reader!.readLine()
        while line! <> null()
            matcher! = pattern!.matcher(line!)
            if matcher!.find() then
                rem returning the full match
                match! = matcher!.group(0)
                break
            endif

            line! = reader!.readLine()
        wend
    
        reader!.close(err=*next)
        fileReader!.close(err=*next)

        methodret match!
    methodend

    rem /**
    rem  * Copies the jre directory or archive of the given settings object into the given output directory
    rem  *
    rem  * @param osSettings! The OSSpecificSettings object with the information about the target OS
    rem  * @param outputDirectory! The output directory in which to copy the jre 
    rem  */
    method public void copyJreDirectory(OSSpecificSettings osSettings!, File outputDirectory!)
        declare File jreDirectory!
        declare File jreOutputDirectory!

        jreOutputDirectory! = new File(outputDirectory!, "jre")
        jreOutputDirectory!.mkdirs()

        if osSettings!.getJreSourceDirectory() <> null() then
            jreDirectory! = osSettings!.getJreSourceDirectory()

            #copyDirectory(jreDirectory!, jreOutputDirectory!)
            methodret
        endif

        declare File archiveFile!
        archiveFile! = osSettings!.getJreSourceArchiveFile()

        if archiveFile!.getName().endsWith("tar.gz") then
            ArchiveFileExtractor.extractTarGz(archiveFile!, jreOutputDirectory!)
        else
            rem .zip
            ArchiveFileExtractor.extractZip(archiveFile!, jreOutputDirectory!)
        endif

        files! = jreOutputDirectory!.listFiles()
        jdkDirectory! = cast(File, files![0])

        macJDKDirectory! = new File(jdkDirectory!, "Contents/Home/")
        if macJDKDirectory!.exists() then
            #move(macJDKDirectory!, jreOutputDirectory!)
        else
            #move(jdkDirectory!, jreOutputDirectory!)
        endif

        rem removing the old jdk directory (jdk-11....)
        jdkDirectory!.delete()
    methodend

    method public void copyDirectory(File source!, File destination!)
        files! = source!.listFiles()

        arr! = java.lang.reflect.Array.newInstance(Class.forName("java.nio.file.CopyOption"), 2)
        java.lang.reflect.Array.set(arr!, 0, cast(java.nio.file.CopyOption, java.nio.file.StandardCopyOption.COPY_ATTRIBUTES))
        java.lang.reflect.Array.set(arr!, 1, cast(java.nio.file.CopyOption, java.nio.file.LinkOption.NOFOLLOW_LINKS))

        if files!.length = 0 then
            methodret
        endif

        for i=0 to files!.length -1
            current! = files![i]
            currentFile! = new File(destination!, current!.getName())

            if current!.isDirectory() then
                currentFile!.mkdirs()
                #copyDirectory(current!, currentFile!)
                continue
            endif

            if currentFile!.exists() then
                currentFile!.delete()
            endif
            
            ok=0; java.nio.file.Files.copy(current!.toPath(), currentFile!.toPath() , arr!, err=*next); ok=1
            if !ok then
                #logger!.error("Failed to copy file: " + str(current!.getAbsolutePath() + " to the target directory")
            endif
        next i
    methodend

    method private void move(File sourceDirectory!, File targetDirectory!)
        files! = sourceDirectory!.listFiles()
        if files! <> null() then
            for i = 0 to files!.length -1
                file! = cast(File, files![i])
                file!.renameTo(new File(targetDirectory!, file!.getName()))
            next i
        endif
    methodend

    rem /**
    rem  * Downloads the native libraries
    rem  * TODO
    rem  */
    method public void downloadNativeLibraries(PackageBuildSettings packageSettings!, OSSpecificSettings osSettings!, File outputDirectory!)
        declare File libDirectory!
        libDirectory! = new File(outputDirectory!, "lib/")
        libDirectory!.mkdir()

        webstartJar! = "webstart2166.jar"
        if osSettings!.getTargetOSName() = "linux" then
            webstartJar! = "webstart2145.jar"
        else
            if osSettings!.getTargetOSName() = "mac" then
                webstartJar! = "webstart2120.jar"
            endif
        endif

        url! = packageSettings!.getBaseURL() + "basis/" + webstartJar!

        downloadURL! = new java.net.URL(url!)
        downloadFile! = new File(libDirectory!, webstartJar!)

        downloadSuccess = DownloadService.downloadFile(downloadURL!, downloadFile!, 3)
        if !downloadSuccess then
            a = msgbox("The .exe packer failed to download the jar file from: " + str(downloadURL!))
            ? downloadURL!
            escape
            release
        endif

        rem extracting the native libraries out of the webstart2166.jar
        #extractNativeLibraries(libDirectory!, downloadFile!, packageSettings!, osSettings!)

        rem removing the webstart2166.jar
        downloadFile!.delete()
    methodend

    method public void extractNativeLibraries(File libDirectory!, File webstartJar!, PackageBuildSettings packageSettings!, OSSpecificSettings osSettings!)
        seterr extractNativeLirariesErrorHandler
            rem Hack to create a byte[1024] in BBj
            declare ByteArrayOutputStream bos!
            bos! = new ByteArrayOutputStream(1024)
            for i=0 to 1024-1
                bos!.write(0)
            next i
            bytes! = bos!.toByteArray()

            declare ZipInputStream zipInputStream!
            zipInputStream! = new ZipInputStream(new FileInputStream(webstartJar!))

            rem use64Bit! = !settings!.is32bitJreOptionEnabled()
            emulateWebstart! = packageSettings!.isEmulateWebstartOptionEnabled()

            declare ZipEntry zipEntry!
            zipEntry! = zipInputStream!.getNextEntry()

            targetOS! = osSettings!.getTargetOSName()

            switch targetOS!
                case #TARGET_PLATFORM_MAC!     ; fileSuffix! = ".jnilib" ; break
                case #TARGET_PLATFORM_LINUX!   ; fileSuffix! = ".so"     ; break
                case #TARGET_PLATFORM_WINDOWS! ; fileSuffix! = ".dll"    ; break
            swend

            declare File lib32!
            lib32! = new File(libDirectory!, "32")
            lib32!.mkdir()

            declare File lib64!
            lib64! = new File(libDirectory!, "64")
            lib64!.mkdir()

            while(zipEntry! <> null())
                fileName! = zipEntry!.getName()

                if fileName! = "BBjPortID.jar" then
                    newFile! = new File(libDirectory!, "BBjPortID.jar")
                    goto extract_file
                endif

                rem only keeping the native library files
                if !fileName!.endsWith(fileSuffix!) then
                    goto next_entry
                endif

                if fileName!.endsWith("64" + fileSuffix!) then
                    rem 64bit libraries
                    rem fileName! = fileName!.replaceAll("64" + fileSuffix!, fileSuffix!)
                    newFile! = new File(lib64!, fileName!)
                else
                    rem 32bit libraries
                    newFile! = new File(lib32!, fileName!)
                endif

                extract_file: 
                    print "unzip: " + str(fileName!)
                    byteRead = zipInputStream!.read(bytes!)

                    rem First checking to avoid creating files instead of folders
                    if(byteRead > 0) then
                        fos! = new FileOutputStream(newFile!)

                        while(byteRead > 0)
                            fos!.write(bytes!, 0, byteRead)
                            byteRead = zipInputStream!.read(bytes!)
                        wend

                        fos!.close()
                    endif

                next_entry:
                    zipEntry! = zipInputStream!.getNextEntry()
            wend

        extractNativeLirariesErrorHandler:
            zipInputStream!.closeEntry(err=*next)
            zipInputStream!.close(err=*next)

            bos!.close(err=*next)
    methodend

    method public void downloadJarDependencies(PackageBuildSettings packageSettings!, OSSpecificSettings osSetting!, File outputDirectory!)
        #logger!.trace("ExePackerCore::downloadJarDependencies(PackageBuildSettings, OSSpecificSettings, File)")

        declare BBjVector jarDependencies!
        jarDependencies! = packageSettings!.getJarDependencies()

        if jarDependencies! = null() OR jarDependencies!.isEmpty() then
            methodret
        endif

        declare File libDirectory!
        libDirectory! = new File(outputDirectory!, "lib")
        libDirectory!.mkdir()

        rem Copying/Downloading the JnlpIndex.jar to the output directory. It will be used later, to identify the exact 
        rem file names to copy/download which are not explicitly stated in the .jnlp file but required for the launch
        declare File jnlpIndexFile!
        jnlpIndexFile! = new File(libDirectory!, "JnlpIndex.jar")

        declare URL downloadURL!
        downloadURL! = new URL(packageSettings!.getBaseURL() + "basis/JnlpIndex.jar")

        downloadSuccess = DownloadService.downloadFile(downloadURL!, jnlpIndexFile!, 3)
        if !downloadSuccess then
            a = msgbox("The .exe packer failed to download the jar file from: " + str(downloadURL!.toString()))
            release
        endif

        rem Adding the jars which might not be stated explicitly in the .jnlp file but are definitly required
        JnlpApplicationDependencyManager.addMissingJars(jnlpIndexFile!, jarDependencies!)

        for i = 0 to jarDependencies!.size() -1
            fileName! = jarDependencies!.get(i)

            rem Skipping the JnlpIndex.jar since it was downloaded earlier
            if fileName! = "JnlpIndex.jar" OR fileName! = "WebstartLauncher.jar" then
                continue
            endif

            #logger!.info("Downloading " + fileName! + " from " + packageSettings!.getBaseURL() + "basis/" + fileName!)

            downloadURL! = new java.net.URL(packageSettings!.getBaseURL() + "basis/" + fileName!)
            downloadFile! = new File(libDirectory!, fileName!)

            downloadSuccess = DownloadService.downloadFile(downloadURL!, downloadFile!, 3)

            if !downloadSuccess then
                a = msgbox("The .exe packer failed to download the jar file from: " + str(downloadURL!.toString()))
                release
            endif
        next i

        declare BBjVector osLibraries!
        osLibraries! = osSetting!.getOSSpecificLibraries()
        if osLibraries! <> null() and !osLibraries!.isEmpty() then
            for i = 0 to osLibraries!.size() -1
                fileName! = osLibraries!.get(i)

                #logger!.info("Downloading " + fileName! + " from " + packageSettings!.getBaseURL() + "basis/" + fileName!)

                downloadURL! = new java.net.URL(packageSettings!.getBaseURL() + "basis/" + fileName!)
                downloadFile! = new File(libDirectory!, fileName!)

                downloadSuccess = DownloadService.downloadFile(downloadURL!, downloadFile!, 3)

                if !downloadSuccess then
                    a = msgbox("The .exe packer failed to download the jar file from: " + str(downloadURL!.toString()))
                    release
                endif
            next i
        endif

        rem Copying the WebStartLauncherJar from the current directory to the lib folder
        currentDir! = #getPackerDirectory().getParentFile()
        libDir! = new File(currentDir!, "lib")

        FileUtils.copyFile(new File(libDir!, "WebstartLauncher.jar"), new File(libDirectory!, "WebstartLauncher.jar"))
        jarDependencies!.insertItem(0, "WebstartLauncher.jar")
    methodend

    method private void validateValues(PackageBuildSettings settings!)
        rem output directory
        rem jre directory
        rem base url
        rem TODO
    methodend

    rem /**
    rem  * Clears the given directory directory
    rem  * 
    rem  * @param 
    rem  */
    method public void cleanOutputDirectory(PackageBuildSettings settings!)
        rem TODO - In case an error occurs -> throw custom error message
        FileUtils.cleanDirectory(settings!.getOutputDirectory())
    methodend

    rem /**
    rem  * Returns the directory of this program.
    rem  * 
    rem  * @return the directory of this program.
    rem  */
    method public File getPackerDirectory()
        BBjFileSystem!=BBjAPI().getFileSystem()
        fullPath$ = BBjFileSystem!.resolvePath(pgm(-2))

        declare File file!
        file! = new File(fullPath$)

        if(file! = null() OR !file!.exists()) then
            a = msgbox("Failed to retrieve the ExePacker Directory")
            release
        endif

        methodret file!.getParentFile()
    methodend

    method public static String TARGET_PLATFORM_MAC()
        methodret #TARGET_PLATFORM_MAC!
    methodend

    method public static String TARGET_PLATFORM_LINUX()
        methodret #TARGET_PLATFORM_LINUX!
    methodend

    method public static String TARGET_PLATFORM_WINDOWS()
        methodret #TARGET_PLATFORM_WINDOWS!
    methodend

  rem   method public File createLaunch4jConfigurationFile(PackageBuildSettings settings!, OSSpecificSettings osSettings!, File outputDirectory!)
  rem       rem Creating the launch4j template File handle
  rem       templateFile! = new File(#getPackerDirectory().getParentFile(), "template.xml")

  rem       declare ConfigurationFileHandler configHandler!
  rem       configHandler! = new ConfigurationFileHandler(templateFile!)

  rem       configHandler!.setProgramArguments(settings!.getBBjProgramArguments())
  rem       configHandler!.setEmulateWebstart(settings!.isEmulateWebstartOptionEnabled())
  rem       configHandler!.setJvmArguments(settings!.getJvmArguments())
  rem       configHandler!.setJarDependencyDirectory("lib/")

  rem       resFolder! = new File(outputDirectory!, "res")
  rem       shortcutIconURL! = settings!.getShortcutIconURL()
  rem       if shortcutIconURL! <> null() and !shortcutIconURL!.isEmpty() then
  rem           rem check it is a .ico file
  rem           fileType! = shortcutIconURL!.substring(shortcutIconURL!.lastIndexOf("."))

  rem           if fileType! = ".ico" then
  rem               if !shortcutIconURL!.matches("^http(s)?\:\/\/.*") then
  rem                   shortcutIconURL! = settings!.getBaseURL() + shortcutIconURL!
  rem               endif

  rem               downloadFile! = new File(resFolder!, "shortcut.ico")

  rem               downloadSuccess = DownloadService.downloadFile(new URL(shortcutIconURL!), downloadFile!, 3)
  rem               if !downloadSuccess then
  rem                   throw "The .exe packer failed to download the application icon from: " + shortcutIconURL!.toString(), 300
  rem               endif

  rem               configHandler!.setShortcutIconPath("res/shortcut.ico")
  rem           endif
  rem       endif

  rem       splashIconURL! = settings!.getSplashIconURL()
  rem       if splashIconURL! <> null() and !splashIconURL!.isEmpty() then
  rem           fileType! = splashIconURL!.substring(splashIconURL!.lastIndexOf("."))

  rem           if !splashIconURL!.matches("^http(s)?\:\/\/.*") then
  rem               splashIconURL! = settings!.getBaseURL() + splashIconURL!
  rem           endif

  rem           downloadFile! = new File(resFolder!, "splash" + fileType!)

  rem           downloadSuccess = DownloadService.downloadFile(new URL(splashIconURL!), downloadFile!, 3)
  rem           if !downloadSuccess then
  rem               throw "The .exe packer failed to download the splash icon from: " + splashIconURL!.toString(), 300
  rem           endif

  rem           configHandler!.setSplashIconPath("res/splash" + fileType!)
  rem       endif

  rem       rem configHandler!.setIs64BitJRE(settings!.is32bitJreOptionEnabled())
		rem configHandler!.setIs64BitJRE(Boolean.TRUE)

  rem       exeFileName! = "MyApplication.exe"
  rem       if osSettings!.getExecutableFileName() <> null() then
  rem           exeFileName! = osSettings!.getExecutableFileName()
  rem       endif

  rem       configHandler!.setOutputFile(new File(outputDirectory!, exeFileName!).getAbsolutePath())

  rem       methodret configHandler!.createConfigurationFile(outputDirectory!)
  rem   methodend

classend

declare PackageBuildSettings settings!
settings! = new PackageBuildSettings()
settings!.setOutputDirectory(new File("/u/tmp/output/"))
settings!.enableClearOutputDirectoryOption(Boolean.TRUE)

args! = new BBjVector()
args!.add("-INF1800")
args!.add("-q")
args!.add("-RH10.66.115.13")
args!.add("-tT2")
args!.add("C:\Users\sadams\Desktop\Sample.bbj")

settings!.setBBjProgramArguments(args!)
settings!.setJvmArguments(null())
settings!.setBaseURL("http://localhost:8888/")
settings!.enableEmulateWebstartOption(Boolean.TRUE)

declare OSSpecificSettings osSettings!
osSettings! = new OSSpecificSettings()
osSettings!.setJreSourceDirectory(new File("/opt/java/current/jre/"))
osSettings!.setTargetOSName("linux")

settings!.addOSSpecificSettings(osSettings!)

osSettings! = new OSSpecificSettings()
osSettings!.setJreSourceArchiveFile(new File("/u/tmp/client-packer/openjdk-11.0.1_windows-x64_bin.zip"))
osSettings!.setTargetOSName("windows")

settings!.addOSSpecificSettings(osSettings!)

osSettings! = new OSSpecificSettings()
osSettings!.setJreSourceArchiveFile(new File("/u/tmp/client-packer/openjdk-11.0.1_osx-x64_bin.tar.gz"))
osSettings!.setTargetOSName("mac")

settings!.addOSSpecificSettings(osSettings!)

declare BBjVector jarDependencies!
jarDependencies! = new BBjVector()
jarDependencies!.add("BBjBootstrap.jar")
jarDependencies!.add("JnlpIndex.jar")
jarDependencies!.add("BBjThinClient.jar")
jarDependencies!.add("BBjUtil.jar")
jarDependencies!.add("guava-24.0-jre.jar")
jarDependencies!.add("cglib-3.2.6.jar")
jarDependencies!.add("basisfonts.jar")
jarDependencies!.add("asm-6.2.1.jar")
jarDependencies!.add("asm-commons-6.2.1.jar")
jarDependencies!.add("asm-tree-6.2.1.jar")
jarDependencies!.add("asm-util-6.2.1.jar")

settings!.setJarDependencies(jarDependencies!)

settings!.setShortcutIconURL("files/readme.ico")
settings!.setSplashIconURL("files/BBj.png")

settings!.enableEmulateWebstartOption(Boolean.TRUE)
rem settings!.setOutputFileName("MyExe.exe")

declare ExePacker packer!
packer! = new ExePacker()
packer!.generateClientPackages(settings!)

release