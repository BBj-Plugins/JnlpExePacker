use java.io.File
use java.io.FileInputStream

use java.lang.StringBuilder

use org.apache.commons.io.IOUtils
use org.apache.commons.io.FileUtils

use com.basiscomponents.db.constants.SimpleConstantsResolver

class public ConfigurationFileHandler
  
    field private File templateFile!
    
    field private String jvmArguments!
    
    field private String bbjCommandLineArguments! = ""
    field private String webstartLauncherArguments! = ""
    
    field private SimpleConstantsResolver constantResolver!
    
    method public ConfigurationFileHandler(File templateFile!)
        #templateFile! = templateFile!
        #constantResolver! = new SimpleConstantsResolver()
        
        #constantResolver!.put("Icon", "")
        #constantResolver!.put("Splash", "")
        #constantResolver!.put("LookAndFeel", "")
    methodend 

    method public void setProgramArguments(String pgmArguments!)
        #bbjCommandLineArguments! = pgmArguments!
        #setLookAndFeel()
    methodend
    
    method public void setProgramArguments(BBjVector arguments!)
        #bbjCommandLineArguments! = #getStringFromVector(arguments!)
        #setLookAndFeel()
    methodend
    
    rem replacing the JVM arguments placeholder with the user defined jvm arguments
    method public void setJvmArguments(String jvmArguments!)
        #constantResolver!.put("JvmArguments", jvmArguments!)
    methodend

    method public void setJvmArguments(BBjVector jvmArguments!)
        #constantResolver!.put("JvmArguments", #getStringFromVector(jvmArguments!))
    methodend
    
    method private String getStringFromVector(BBjVector vector!)
        declare StringBuilder builder!
        builder! = new StringBuilder()
        
        seterr getStringFromVectorEnd
            if vector! = null() or vector!.isEmpty() then
                goto getStringFromVectorEnd
            endif
            
            for i=0 to vector!.size() -1
                builder!.append(vector!.get(i))
                
                if i+1 <= vector!.size() -1 then
                    builder!.append(" ")
                endif
            next i
        getStringFromVectorEnd:
            methodret builder!.toString()
    methodend

    rem Adding the flag telling the WebstartLauncher to Emulate the original Webstart or not
    rem Adding this option causes the info(3,6) to return 3. If this flag is omitted, info(3,6) retuns 1
    method public void setEmulateWebstart(Boolean emulateWebstart!)
        if !emulateWebstart! then
            methodret
        endif

        rem TODO Check if it isn't already added
        
        #webstartLauncherArguments! = " -emulateWebstart" + #webstartLauncherArguments!
        #webstartLauncherArguments! = cvs(#webstartLauncherArguments!,3)
    methodend
    
    method public void setSplashIconPath(String splashIconPath!)
        #constantResolver!.put("Splash", "-splash:" + splashIconPath!)
    methodend
    
    method public void setShortcutIconPath(String shortcutIconPath!)
        #constantResolver!.put("Icon", shortcutIconPath!)
    methodend
    
    method public void setHostName(String hostname!)
        rem replacing the hostname placeholder with the actual hostname if present
        #bbjCommandLineArguments! = #bbjCommandLineArguments!.replace("{-hostname-}", hostname!).trim()
        #bbjCommandLineArguments! = #bbjCommandLineArguments!.replaceAll("\\", "/")
    methodend
    
    method public void setJarDependencies(String outputDirectory!, BBjVector dependencyList!)
        if dependencyList! = null() OR !dependencyList!.isEmpty() then
            rem "Error"
        endif  
        
        declare StringBuilder sb!
        sb! = new StringBuilder()

        for i=0 to dependencyList!.size()-1
            sb!.append($09$ + $09$ + "<cp>" + outputDirectory! + dependencyList!.get(i) + "</cp>")
            if(i+1 < dependencyList!.size()) then
                sb!.append($0A$)
            endif
        next i

        #constantResolver!.put("CP_jars", sb!.toString())
    methodend
    
    method private void setLookAndFeel()
        if(#bbjCommandLineArguments!.contains("-LF")) then
            startIndex = #bbjCommandLineArguments!.indexOf("-LF")
            endIndex = #bbjCommandLineArguments!.indexOf(" ", startIndex+1)

            rem remove the -LF and add -Dswing.defaultlaf= as prefix
            lf! = #bbjCommandLineArguments!.substring(startIndex, endIndex)
            lf! = lf!.trim()
            lf! = lf!.substring(3)

            if(lf! <> "cross" AND lf! <> "vpro5") then
                lf! = "-Dswing.defaultlaf=" + lf!
                #constantResolver!.put("LookAndFeel", lf!)
                #bbjCommandLineArguments! = #bbjCommandLineArguments!.substring(0, startIndex) + #bbjCommandLineArguments!.substring(endIndex)
            endif
        else
            rem Setting the default LF
            #constantResolver!.put("LookAndFeel", "-Dswing.defaultlaf=com.sun.java.swing.plaf.windows.WindowsLookAndFeel")
        endif
    methodend
    
    rem /**
    rem  * Sets the path of the .exe file.
    rem  * 
    rem  * @param filepath! The file path of the .exe file.
    rem  */
    method public void setOutputFile(String filepath!)
        #constantResolver!.put("outfile", filePath!.replace("\","\\"))
    methodend
    
    method public void setIs64BitJRE(Boolean is64BitJRE!)
        #constantResolver!.put("is64bit", String.valueOf(is64BitJRE!))
    methodend
    
    method public File createConfigurationFile(File outputDirectory!)
        commandLine! = cvs(#bbjCommandLineArguments!,3)
        if len(cvs(#webstartLauncherArguments!,3)) then
           commandLine! = commandLine! + " || " + #webstartLauncherArguments!
        endif 
        
        #constantResolver!.put("CmdLine", commandLine!.replace("\", "\\"))
        
        declare FileInputStream fileInputStream!
        fileInputStream! = new FileInputStream(#templateFile!)
    
        rem copying the WebstartLauncher.jar to the outpudirectory
        template$ = IOUtils.toString(fileInputStream!, "UTF-8")
        
        fileInputStream!.close(err=*next)
    
        content! = #constantResolver!.resolveConstants(template$)

        declare File configFile!
        configFile! = new File(outputDirectory!, "config.xml")

        rem writing the config.xml file into the output directory 
        ch = unt
        open(ch, mode="o_create,o_trunc") configFile!.getAbsolutePath()
        write(ch) content!
        close(ch)
        
        methodret configFile!
    methodend

classend