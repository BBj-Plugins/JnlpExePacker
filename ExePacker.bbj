use org.apache.commons.io.FileUtils
use org.apache.commons.io.IOUtils

use java.net.InetAddress

use java.io.File
use java.util.HashMap
use java.util.Iterator
use java.lang.StringBuilder
use java.io.FileInputStream
use java.io.ByteArrayInputStream

use java.net.URL
use java.io.FileWriter
use java.io.IOException
use java.io.InputStream
use java.io.OutputStream
use java.io.BufferedReader
use java.io.FileOutputStream
use java.io.InputStreamReader
use java.io.BufferedInputStream
use java.io.BufferedOutputStream
use java.io.ByteArrayOutputStream

use java.util.zip.ZipEntry
use java.util.zip.ZipInputStream

use ::src/StateHandler.bbj::StateHandler
use ::src/JnlpFileParser.bbj::JnlpFileParser
use ::src/AdminBaseHandler.bbj::AdminBaseHandler
use ::src/CustomHostNameVerifier.bbj::CustomHostNameVerifier
use ::src/AdminAPICredentialWindow.bbj::AdminAPICredentialWindow
use ::src/ConfigurationFileHandler.bbj::ConfigurationFileHandler
use ::src/JnlpApplicationDependencyManager.bbj::JnlpApplicationDependencyManager

use javax.net.ssl.SSLSession
use javax.net.ssl.HostnameVerifier
use javax.net.ssl.HttpsURLConnection

class public ExePacker

    field private BBjInt controlSpacing% = 10
    field private static BBjInt buttonWidth% = 75
    field private static BBjInt buttonHeight% = 25

    field private BBjSysGui sysGui!
    field private BBjButton btnBrowse!
    field private BBjButton btnCancel!
    field private BBjButton btnGenerate!
    field private BBjButton btnJreBrowse!
    field private BBjCheckBox chbIs32bit!
    field private BBjTopLevelWindow window!
    field private BBjInputE inpeJreDirectory!
    field private BBjListEdit leServerHostName!
    field private BBjInputE inpeOutputDirectory!
    field private BBjCheckBox chbEmulateWebstart!
    field private BBjListEdit leJnlpConfiguration!
    field private BBjButton btnRefreshConfigurations!
    field private BBjProgressBar pgbGenerateProgress!
    field private BBjCheckBox chbClearOutputDirectory!

    field private BBjVector jarNameList!
    field private BBjVector jnlpApplications!

    field private HashMap adminBaseMap!
    field private BBjAdminBase defaultAdminBase!
    
    field private StateHandler stateHandler!
    field private JnlpFileParser jnlpFileParser!
    field private AdminBaseHandler adminBaseHandler!

    method public ExePacker()
        #sysGui! = BBjAPI().openSysGui("X0")

        rem Adding the path to this program into the prefix so that the required programs will be found
        prefix """" + #getPackerDirectory().getAbsolutePath() + "/"" " + pfx

        rem either returns a valid object or throws an exception
        #defaultAdminBase! = #getAdminBase("localhost")

        #adminBaseMap!= new HashMap()

        #stateHandler! = new StateHandler()
        #jnlpFileParser! = new JnlpFileParser() 
        #adminBaseHandler! = new AdminBaseHandler()

        #initGui()
    methodend

    method public BBjAdminBase getAdminBase(String server!)
        rem setting the credentials to the default because in most cases these are still used
        username! = "admin"
        password! = "admin123"

        declare AdminAPICredentialWindow win!
        win! = new AdminAPICredentialWindow()

        declare BBjAdminBase adminBase!
        declare InetAddress address!

        address! = InetAddress.getByName(server!)

        counter = 0
        validCredentials! = Boolean.FALSE
        while(adminBase! = null() AND counter < 5)
            adminBase! = BBjAdminFactory.getBBjAdmin(address!, username!, password!, err=*next)

            rem exiting the loop once we get a valid BBjAdminBase object
            if(adminBase! <> null()) then
                break
            endif

            errorMessage! = errmes(-1)
            if(!errorMessage!.contains("failed login")) then
                throw "Failed to connect to the Admin API" + $0A$ + errorMessage!, 300
            endif

            if(counter <> 0) then
                answer = msgbox("Failed to connect to the Admin API: Invalid Credentials")
            endif

            win!.open(#sysGui!)

            username! = win!.getUsername()
            password! = win!.getPassword()
            counter = counter + 1
        wend

        if(counter = 5) then
            throw "Connection Failed: To many invalid attempts", 300
        endif

        methodret adminBase!
    methodend

    method private void initGui()
        print 'cs'
        print 'hide'

        window_width = 450
        window_height = 290

        #window! = #sysGui!.addWindow(#sysGui!.getAvailableContext(), 200, 200, window_width, window_height, "JNLP .exe Packer", $00010003$)

        rem Row 1
        x_pos = 15
        y_pos = 15
        space = #controlSpacing%

        #window!.addStaticText(#window!.getAvailableControlID(), x_pos, y_pos+2, 100, 15, "Server Host Name:")
        x_pos = x_pos + space + 100

        input_width = (window_width - x_pos - space*2 - #buttonWidth%)

        #leServerHostName! = #window!.addListEdit(#window!.getAvailableControlID(), x_pos, y_pos-3, input_width, 200, "localhost")
        x_pos = x_pos + space + 100

        #leServerHostName!.setEditable(1)
        #leServerHostName!.selectIndex(0)
        #leServerHostName!.setCallback(BBjAPI.ON_LIST_SELECT, #this!, "serverHostNameListSelect")
        #leServerHostName!.setCallback(BBjAPI.ON_LOST_FOCUS, #this!, "serverHostNameLostFocus")

        rem Row 2
        x_pos = 15
        y_pos = 45

        #window!.addStaticText(#window!.getAvailableControlID(), x_pos, y_pos+2, 100, 15, "JNLP Application:")
        x_pos = x_pos + space + 100

        #leJnlpConfiguration! = #window!.addListEdit(#window!.getAvailableControlID(), x_pos, y_pos-2, input_width, 200, "")
        x_pos = x_pos + space + input_width

        #initJnlpApplicationListEdit(#leJnlpConfiguration!)

        #btnRefreshConfigurations! = #window!.addButton(#window!.getAvailableControlID(), x_pos, y_pos-5, #buttonWidth%, #buttonHeight%, "Refresh")
        #btnRefreshConfigurations!.setCallback(BBjAPI.ON_BUTTON_PUSH, #this!, "refreshConfigurationsButtonPush")

        rem Row 2
        x_pos = 15
        y_pos = 75

        rem Managing the JRE Directory
        #window!.addStaticText(#window!.getAvailableControlID(), x_pos, y_pos + 2, 150, 15, "JRE Directory:")
        x_pos = x_pos + space + 100

        #inpeJreDirectory! = #window!.addInputE(#window!.getAvailableControlID(), x_pos, y_pos-3, input_width, 20, "")
        x_pos = x_pos + space + (window_width - x_pos - space - #buttonWidth% -10)

        #inpeJreDirectory!.setText(System.getProperty("java.home", err=*next))

        #btnJreBrowse! = #window!.addButton(#window!.getAvailableControlID(), x_pos, y_pos-5, #buttonWidth%, #buttonHeight%, "Browse")
        x_pos = x_pos + space + #buttonWidth%

        #btnJreBrowse!.setCallback(BBjAPI.ON_BUTTON_PUSH, #this!, "browseJreDirectoryButtonPush")

        rem Row 3
        x_pos = 15
        y_pos = 97

        #chbIs32bit! = #window!.addCheckBox(#window!.getAvailableControlID(), x_pos, y_pos, window_width - (2*space), 20, "Is 32 bit JRE")
        #chbIs32bit!.setSelected(0)

        rem Row 4
        x_pos = 15
        y_pos = 135

        rem Managing the Output Directory
        #window!.addStaticText(#window!.getAvailableControlID(), x_pos, y_pos + 2, 150, 15, "Output Directory:")
        x_pos = x_pos + space + 100

        #inpeOutputDirectory! = #window!.addInputE(#window!.getAvailableControlID(), x_pos, y_pos-2, input_width, 20, "")
        x_pos = x_pos + space + (window_width - x_pos - space - #buttonWidth% -10)

        outputDir! = #stateHandler!.getLastUsedOutputDirectory()
        if(outputDir! <> null()) then
            declare File outputDirectory!
            outputDirectory! = new File(outputDir!)
            if(outputDirectory!.exists() AND outputDirectory!.isDirectory()) then
                #inpeOutputDirectory!.setText(outputDir!)
            endif
        endif

        #btnBrowse! = #window!.addButton(#window!.getAvailableControlID(), x_pos, y_pos-5, #buttonWidth%, #buttonHeight%, "Browse")
        x_pos = x_pos + space + #buttonWidth%

        #btnBrowse!.setCallback(BBjAPI.ON_BUTTON_PUSH, #this!, "browseButtonPush")

        rem Row 4
        x_pos = 15
        y_pos = 160 -3

        #chbClearOutputDirectory! = #window!.addCheckBox(#window!.getAvailableControlID(), x_pos, y_pos, window_width - (2*space), 20, "Clear Output directory")
        #chbClearOutputDirectory!.setSelected(1)

        rem Row 5
        x_pos = 15
        y_pos = 190-9

        #chbEmulateWebstart! = #window!.addCheckBox(#window!.getAvailableControlID(), x_pos, y_pos, window_width - (2*space), 20, "Emulate Webstart")
        #chbEmulateWebstart!.setToolTipText("This option causes the program to behave as if it was launched via Webstart: Causes the info(3,6) to return 3. " +                                            "This option automatically starts the Thin Client Proxy Server" )

        rem Row 5
        x_pos = 15
        y_pos = 220

        #pgbGenerateProgress! = #window!.addProgressBar(#window!.getAvailableControlID(), x_pos, y_pos, window_width - (2 * space), 20)
        #pgbGenerateProgress!.setVisible(0)

        button_y = window_height - space - #buttonHeight%
        #btnGenerate! = #window!.addButton(#window!.getAvailableControlID(), window_width - (2 * space) - (2 * #buttonWidth%), button_y, #buttonWidth%, #buttonHeight%, "Generate")
        #btnGenerate!.setCallback(BBjAPI.ON_BUTTON_PUSH, #this!, "generateButtonPush")

        #btnCancel! = #window!.addButton(#window!.getAvailableControlID(), window_width - space - #buttonWidth%, button_y, #buttonWidth%, #buttonHeight%, "Cancel")
        #btnCancel!.setCallback(BBjAPI.ON_BUTTON_PUSH, #this!, "cancelButtonPush")

        #window!.setCallback(BBjAPI.ON_CLOSE, #this!, "closeWindow")
        #window!.setCallback(BBjAPI.ON_RESIZE, #this!, "resizeWindow")

        #window!.setVisible(0)
    methodend

    method public void refreshConfigurationsButtonPush(BBjButtonPushEvent event!)
        #initJnlpApplicationListEdit(#leJnlpConfiguration!)
    methodend

    method public void serverHostNameLostFocus(BBjLostFocusEvent event!)
        listEdit! = cast(BBjListEdit, event!.getControl())
        index = listEdit!.getSelectedIndex()

        #serverChanged(listEdit!,index)
    methodend

    method private void serverChanged(BBjListEdit listEdit!, BBjNumber index)
        #enableControls(0)

        if(index < 0) then
            hostname! = listEdit!.getText()

            seterr adminBaseRetrieveHandler
                adminBase! = #getAdminBase(hostname!)
            adminBaseRetrieveHandler:
                if(adminBase! = null()) then
                    a = msgbox(errmes(-1))
                    #enableControls(1)
                    listEdit!.focus()
                    methodret
                endif

            #adminBaseMap!.put(hostname!, adminBase!)
            listEdit!.addItem(hostname!)
            listEdit!.selectIndex(listEdit!.getItemCount()-1)
        endif

        #enableControls(1)

        adminBase! = #adminBaseMap!.getOrDefault(listEdit!.getText(), #defaultAdminBase!)
        #adminBaseHandler!.setAdminBase(adminBase!)
        
        declare BBjAdminList list!
        #jnlpApplications! = #adminBaseHandler!.getJnlpApplications()

        #leJnlpConfiguration!.removeAllItems()
        it! = #jnlpApplications!.iterator()
        while(it!.hasNext())
            #leJnlpConfiguration!.addItem(it!.next().getString(BBjAdminJnlpApplication.NAME))
        wend

        #leJnlpConfiguration!.selectIndex(0)
    methodend

    method public void serverHostNameListSelect(BBjListSelectEvent event!)
        listEdit! = cast(BBjListEdit, event!.getControl())
        index = listEdit!.getSelectedIndex()

        #serverChanged(listEdit!,index)
    methodend

    method public void browseJreDirectoryButtonPush(BBjButtonPushEvent event!)
        path! = #inpeJreDirectory!.getText()
        fileOpenPath! = dsk("")

        if(path! <> "") then
            declare File directory!
            directory! = new File(path!)

            if(directory!.exists() AND directory!.isDirectory()) then
                fileOpenPath! = directory!.getAbsolutePath()
            endif
        endif


        directoryPath$ = FILEOPEN("JRE Directory Selection", fileOpenPath!,"","","",1)
        if(directoryPath$ <> "::CANCEL::") then
            #inpeJreDirectory!.setText(directoryPath$)
        endif
    methodend

    method public void enableControls(Boolean enabled!)
        #leJnlpConfiguration!.setEnabled(enabled!)

        #inpeJreDirectory!.setEnabled(enabled!)
        #btnJreBrowse!.setEnabled(enabled!)
        #chbIs32bit!.setEnabled(enabled!)

        #inpeOutputDirectory!.setEnabled(enabled!)
        #btnBrowse!.setEnabled(enabled!)
        #chbClearOutputDirectory!.setEnabled(enabled!)

        #chbEmulateWebstart!.setEnabled(enabled!)

        #btnGenerate!.setEnabled(enabled!)
    methodend

    method public void resizeWindow(BBjResizeEvent event!)
        space = #controlSpacing%
        window_width = #window!.getWidth()
        window_height = #window!.getHeight()

        rem #leJnlpConfiguration!.setSize(window_width - #leJnlpConfiguration!.getX() - space, 200)

        #inpeJreDirectory!.setSize((window_width - #inpeJreDirectory!.getX() - (2*space) - #buttonWidth%), #inpeJreDirectory!.getHeight())
        #btnJreBrowse!.setLocation(#inpeJreDirectory!.getX() + #inpeJreDirectory!.getWidth() + space, #btnJreBrowse!.getY())

        size = window_width - #leJnlpConfiguration!.getX() - space - #buttonWidth% - space
        #inpeOutputDirectory!.setSize(size, 20)

        #btnBrowse!.setLocation(window_width - #buttonWidth% - space, #btnBrowse!.getY())

        #pgbGenerateProgress!.setSize(window_width - (2 * space), 20)

        button_y = window_height - space - #buttonHeight%
        #btnGenerate!.setLocation(window_width - (2 * space) - (2 * #buttonWidth%), button_y)
        #btnCancel!.setLocation(window_width - space - #buttonWidth%, button_y)
    methodend

    method private void initJnlpApplicationListEdit(BBjListEdit edit!)
        edit!.removeAllItems()
    
        #adminBaseHandler!.setAdminBase(#defaultAdminBase!)
    
        declare BBjAdminList list!
        #jnlpApplications! = #adminBaseHandler!.getJnlpApplications()

        declare HashMap nameMap!
        nameMap! = new HashMap()

        declare BBjAdminJnlpApplication app!

        currentIndex = 0
        it! = #jnlpApplications!.iterator()
        while(it!.hasNext())
            app! = cast(BBjAdminJnlpApplication, it!.next())
            appName! = app!.getString(BBjAdminJnlpApplication.NAME)

            edit!.addItem(appName!)
            nameMap!.put(appName!, currentIndex)
            currentIndex = currentIndex +1
        wend

        index = 0
        lastApplicationName! = #stateHandler!.getLastUsedJnlpApplicationName()
        if(lastApplicationName! <> null()) then
            index = cast(BBjNumber, nameMap!.getOrDefault(lastApplicationName!, 0))
        endif

        edit!.selectIndex(index)
    methodend

    method public void generateButtonPush(BBjButtonPushEvent event!)
        #pgbGenerateProgress!.setVisible(1)
        #pgbGenerateProgress!.setText("Validating the entries")
        #pgbGenerateProgress!.setValue(0)

        rem Get the output directory file handle
        declare File outputDir!
        outputDir! = new File(#inpeOutputDirectory!.getText())

        rem check for the output directory's existence
        if(!outputDir!.exists()) then
            a = msgbox("The specified output directory doesn't exist. Would you like to create it ?", 4)

            if(a <> 6) then
                a = msgbox("Select an existing output directory in order to generate the .exe file.")
                #pgbGenerateProgress!.setVisible(0)
                #pgbGenerateProgress!.setText("")
                methodret
            endif

            outputDir!.mkdirs()
        endif

        rem making sure that the output directory is indeed a directory
        if(!outputDir!.isDirectory()) then
            a = msgbox("You need to specify a valid output directory to generate an .exe file.")

            #pgbGenerateProgress!.setVisible(0)
            #pgbGenerateProgress!.setText("")
            methodret
        endif

        declare BBjAdminBase adminBase!
        adminBase! = cast(BBjAdminBase,#adminBaseMap!.getOrDefault(#leServerHostName!.getText(), #defaultAdminBase!))   
        #adminBaseHandler!.setAdminBase(adminBase!)
        
        #stateHandler!.setLastUsedOutputDirectory(outputDir!.getAbsolutePath())
        rem #stateHandler!.setLastUsedServerName(#adminBaseHandler!.getHostName())

        declare auto BBjAdminJnlpApplication app!
        app! = #jnlpApplications!.get(#leJnlpConfiguration!.getSelectedIndex())
        #stateHandler!.setLastUsedJnlpApplicationName(app!.getString(BBjAdminJnlpApplication.NAME))
        
        declare BBjAdminJnlpApplication app!
        app! = cast(BBjAdminJnlpApplication, #jnlpApplications!.get(#leJnlpConfiguration!.getSelectedIndex()))
        #jnlpFileParser!.setJnlpApplication(app!)

        if(#chbClearOutputDirectory!.isSelected()) then
            #pgbGenerateProgress!.setText("Clearing the output directory")
            #pgbGenerateProgress!.setValue(5)

            rem clearing the output directory's content
            FileUtils.cleanDirectory(outputDir!)
        endif

        #pgbGenerateProgress!.setText("Copying the jre to the output directory")
        #pgbGenerateProgress!.setValue(20)
        rem Copy the jre into the output directory
        #copyJRE(outputDir!)

        #pgbGenerateProgress!.setText("Copying the native libraries to the output directory")
        #pgbGenerateProgress!.setValue(30)

        rem Copy the native libraries into the output folder 
        #downloadNativeLibraries(outputDir!, !#chbIs32bit!.isSelected())

        #pgbGenerateProgress!.setText("Copying the BBj Jars to the output directory")
        #pgbGenerateProgress!.setValue(45)

        rem Copy the BBj jars into the output folder
        #copyBBjJars(outputDir!)

        #pgbGenerateProgress!.setText("Creating the config file to create the .exe")
        #pgbGenerateProgress!.setValue(75)

        rem Parse the XML, create a config file in the output folder
        #createConfigFile(outputDir!)

        #pgbGenerateProgress!.setText("Creating the .exe file")
        #pgbGenerateProgress!.setValue(90)

        rem Launch the launch4j process to create the .exe
        #generateExe(outputDir!, new File(outputDir!, "config.xml"))

        #pgbGenerateProgress!.setText("Exe created")
        #pgbGenerateProgress!.setValue(100)

        BBjAPI().createTimer("",2,#this!, "resetProgressBar")
    methodend

    method public void resetProgressBar(BBjTimerEvent event!)
        if(!#pgbGenerateProgress!.isDestroyed()) then
            #pgbGenerateProgress!.setText("")
            #pgbGenerateProgress!.setValue(0)
            #pgbGenerateProgress!.setVisible(0)
        endif
    methodend

    method private void copyBBjJars(File outputDir!)
        #jarNameList! = #jnlpFileParser!.getJarDependencyList()
        if #jarNameList! = null() OR #jarNameList!.isEmpty() then
            ? "error - jar name list is empty"
            methodret 
        endif
        
        rem the directory where to save the .exe package
        outputLibDir! = new File(outputDir! , "lib")

        
        
REM         serverREV! = #getServerREV(adminBase!)
REM         if(serverREV! < "REV 17.00") then
REM             a = msgbox("Unsuported BBj Version: " + serverREV! + $0A$ + "The Remote Server's Revision must be 17 or higher.")
REM             methodret
REM         endif

        url! = "http://" + #adminBaseHandler!.getHostName() +":" + #adminBaseHandler!.getHttpPort() + "/"       
        
        rem Copying/Downloading the JnlpIndex.jar to the output directory. It will be used later, to identify the exact 
        rem file names to copy/download which are not explicitly stated in the .jnlp file but required for the launch
        jnlpIndexFile! = new File(outputLibDir!, "JnlpIndex.jar")
        
        print "Downloading the JnlpIndex.jar into the output directory"
        FileUtils.copyURLToFile(new java.net.URL(url! + "basis/JnlpIndex.jar"), jnlpIndexFile!)
        
        rem Adding the jars which might not be stated explicitly in the .jnlp file but are definitly required
        JnlpApplicationDependencyManager.addMissingJars(jnlpIndexFile!, #jarNameList!)
        
        for i = 0 to #jarNameList!.size() -1
            fileName! = #jarNameList!.get(i)
            
            rem Skipping the JnlpIndex.jar since it was downloaded earlier
            if fileName! = "JnlpIndex.jar" then
                continue
            endif
            
            print "Downloading " + fileName! + " from " + url! + "basis/" + fileName!
            
            rem TODO - If the download fails, inform the user with a prompt
            FileUtils.copyURLToFile(new java.net.URL(url! + "basis/" + fileName!), new File(outputLibDir!, fileName!))
        next i
                       
        rem Copying the WebStartLauncherJar from the current directory to the lib folder
        currentDir! = #getPackerDirectory()
        libDir! = new File(currentDir!, "lib")

        outputLibDir! = new File(outputDir! , "lib")
        FileUtils.copyFile(new File(libDir!, "WebstartLauncher.jar"), new File(outputLibDir!, "WebstartLauncher.jar"))
        #jarNameList!.insertItem(0, "WebstartLauncher.jar")
    methodend
    
    method public void createConfigFile(File outputDir!)
        declare BBjAdminJnlpApplication app!
        app! = cast(BBjAdminJnlpApplication, #jnlpApplications!.get(#leJnlpConfiguration!.getSelectedIndex()))
    
        rem Creating the launch4j template File handle
        templateFile! = new File(#getPackerDirectory(), "template.xml")
    
        declare ConfigurationFileHandler configHandler!
        configHandler! = new ConfigurationFileHandler(templateFile!)
        
        configHandler!.setProgramArguments(#jnlpFileParser!.getProgramArguments())
        configHandler!.setEmulateWebstart(#chbEmulateWebstart!.isSelected())

        hostName! = #adminBaseHandler!.getHostName()
        httpPort! = #adminBaseHandler!.getHttpPort()
        
        rem retrieving the hostname from the BBjAdminBase object
        configHandler!.setHostName(hostName!)
        configHandler!.setJvmArguments(#jnlpFileParser!.getJvmArguments())
        configHandler!.setJarDependencies("lib/", #jarNameList!)
        
        resFolder! = new File(outputdir!, "res")
        shortcutIconURL! = #jnlpFileParser!.getShortcutIconURL()
        if shortcutIconURL! <> "" then
            fileType! = shortcutIconURL!.substring(shortcutIconURL!.lastIndexOf("."))

            if(fileType! <> ".ico") then
                a = msgbox("Invalid Shortcut Icon: The application's shortcut icon must be a .ico file." + $0A$ + "The specified icon is omitted.")
            else
                rem check if the URI is preceeded by http or https and add it if its not 
                if(!shortcutIconURL!.startsWith("http://") AND !shortcutIconURL!.startsWith("https://")) then
                    shortcutIconURL! = "http://" + hostName! +":" + httpPort! + "/" + shortcutIconURL!
                endif
                
                FileUtils.copyURLToFile(new java.net.URL(shortcutIconURL!), new File(resFolder!, "shortcut.ico"))
                configHandler!.setShortcutIconPath("res/shortcut.ico")
            endif 
        endif
             
        splashIconURL! = #jnlpFileParser!.getSplashIconURL()
        if splashIconURL! <> "" then
            fileType! = splashIconURL!.substring(splashIconURL!.lastIndexOf("."))
        
            rem check if the URI is preceeded by http or https and add it if its not 
            if(!splashIconURL!.startsWith("http://") AND !splashIconURL!.startsWith("https://")) then
                splashIconURL! = "http://" + hostName! +":" + httpPort! + "/" + splashIconURL!
            endif
        
            FileUtils.copyURLToFile(new java.net.URL(splashIconURL!), new File(resFolder!, "splash" + fileType!))
            configHandler!.setSplashIconPath("res/splash" + fileType!)
        endif

        configHandler!.setIs64BitJRE(!#chbIs32bit!.isSelected())

        rem creating the .exe file path based on the application's name
        file! = new File(outputDir!, app!.getString(BBjAdminJnlpApplication.NAME) + ".exe")
        filePath! = file!.getAbsolutePath()
        filePath! = filePath!.replaceAll("\\", "/")

        configHandler!.setOutputFile(filePath!)
        configHandler!.createConfigurationFile(outputDir!)
    methodend

    method public void cancelButtonPush(BBjButtonPushEvent event!)
        #closeWindow(null())
    methodend

    rem /**
    rem  * Copies the JRE into the given output directory.
    rem  * 
    rem  * @param outputDirectory! The output directory to copy the JRE to.
    rem  */ 
    method private void copyJRE(File outputDirectory!)
        declare File jreDirectory!
        jreDirectory! = new File(#inpeJreDirectory!.getText())

        if(!jreDirectory!.exists() OR !jreDirectory!.isDirectory()) then
            throw "Invalid JRE directory", 300
        endif

        FileUtils.copyDirectory(jreDirectory!, new File(outputDirectory!, "jre"))
    methodend

    rem /**
    rem  * This method downloads the jar with the native libraries into the given output directory, then 
    rem  * extracts it and removes the superfluous .dll files and finally removes the jars with the native libraries again. 
    rem  */
    method private void downloadNativeLibraries(File outputDirectory!, java.lang.Boolean use64bit!)
        href! = #jnlpFileParser!.getWindowsNativeLibrariesJarHRef()
        
        if href! = null() then
            rem TODO - Display an error message sying that the native libs could not be downloaded
            ? "error - missing href! for native libs"
        endif
        
        declare File nativeLibDir!
        nativeLibDir! = new File(outputDirectory!, "/lib/native")
        nativeLibDir!.mkdirs()
        
        rem TODO - Get the real file name by splitting the href
        fileName! = "webstart2166.jar"
        
        url! = "http://" + #adminBaseHandler!.getHostName() +":" + #adminBaseHandler!.getHttpPort() + "/"    
        
        declare File webstartJar!
        webstartJar! = new File(nativeLibDir!, fileName!)
        
        print "Downloading " + fileName! + " from " + url! + href!
            
        rem TODO - If the download fails, inform the user with a prompt
        FileUtils.copyURLToFile(new java.net.URL(url! + href!), webstartJar!)      
      
        rem extracting the native libraries out of the webstart2166.jar
        #extractNativeLibraries(nativeLibDir!, webstartJar!, use64bit!)
        
        rem removing the webstart2166.jar
        webstartJar!.delete()
    methodend

    rem /**
    rem  * Some native libraries are saved in lib/webstart/webstart*.jar files. This method extracts 
    rem  * those native libraries into outputDirectory/lib/native/ directory.
    rem  * 
    rem  * @param nativeLibDir! The directory where to extract the native libraries
    rem  * @param webstartJar! The jar file which contains the native libraries
    rem  */
    method private void extractNativeLibraries(File nativeLibDir!, File webstartJar!, Boolean use64Bit!)

        seterr extractNativeLirariesErrorHandler
            rem Hack to create a byte[1024] in BBj
            declare ByteArrayOutputStream bos!
            bos! = new ByteArrayOutputStream(1024)
            for i=0 to 1024-1
                bos!.write(0)
            next i
            bytes! = bos!.toByteArray()

            declare ZipInputStream zipInputStream!
            zipInputStream! = new ZipInputStream(new FileInputStream(webstartJar!))

            declare ZipEntry zipEntry!
            zipEntry! = zipInputStream!.getNextEntry()

            while(zipEntry! <> null())
                fileName! = zipEntry!.getName()
                
                if(!fileName!.endsWith(".dll")) then
                    zipEntry! = zipInputStream!.getNextEntry()
                    continue
                endif

                if use64Bit! then
                    if !fileName!.endsWith("64.dll") then
                        zipEntry! = zipInputStream!.getNextEntry()
                        continue
                    endif
                else
                    if fileName!.endsWith("64.dll")then
                        zipEntry! = zipInputStream!.getNextEntry()
                        continue
                    endif
                endif

                newFile! = new File(nativeLibDir!, fileName!)
                print "unzip: " + str(fileName!)

                byteRead = zipInputStream!.read(bytes!)

                rem First checking to avoid creating files instead of folders
                if(byteRead > 0) then
                    fos! = new FileOutputStream(newFile!)

                    while(byteRead > 0)
                        fos!.write(bytes!, 0, byteRead)
                        byteRead = zipInputStream!.read(bytes!)
                    wend

                    fos!.close()
                endif

                zipEntry! = zipInputStream!.getNextEntry()
            wend

        extractNativeLirariesErrorHandler:
            zipInputStream!.closeEntry(err=*next)
            zipInputStream!.close(err=*next)

            bos!.close(err=*next)
    methodend

    method public void show()
       #window!.setVisible(1)
    methodend

    method public void closeWindow(BBjCloseEvent event!)
        #window!.destroy()
    methodend

    rem /**
    rem  * Returns the directory of this program.
    rem  * 
    rem  * @return the directory of this program.
    rem  */
    method private File getPackerDirectory()
        BBjFileSystem!=BBjAPI().getFileSystem()
        fullPath$ = BBjFileSystem!.resolvePath(pgm(-2))

        declare File file!
        file! = new File(fullPath$)

        if(file! = null() OR !file!.exists()) then
            a = msgbox("Failed to retrieve the ExePacker Directory")
            release
        endif

        methodret file!.getParentFile()
    methodend

    rem /**
    rem  * Opens a dialog to select an output directory  
    rem  */
    method public void browseButtonPush(BBjButtonPushEvent event!)
        path! = #inpeOutputDirectory!.getText()
        fileOpenPath! = dsk("")

        if(path! <> "") then
            declare File directory!
            directory! = new File(path!)

            if(directory!.exists() AND directory!.isDirectory()) then
                fileOpenPath! = directory!.getAbsolutePath()
            endif
        endif

        directoryPath$ = FILEOPEN("Output Directory Selection", fileOpenPath!,"","","",1)
        if(directoryPath$ <> "::CANCEL::") then
            #inpeOutputDirectory!.setText(directoryPath$)
        endif
    methodend

    rem /**
    rem  * Executes the launch4j jar with the created config.xml file in order to create the 
    rem  * .exe file.
    rem  */
    method private void generateExe(File outputDir!, File configFile!)
        javaHome! = System.getProperty("java.home")
        javaw! = """" + javaHome! + "/bin/javaw.exe" + """"

        currentDir! = #getPackerDirectory().getAbsolutePath() + File.separator

        builder! = new StringBuilder(currentDir! + "launch4j/launch4j.jar;")
        builder!.append(currentDir! + "launch4j/lib/ant.jar;")
        builder!.append(currentDir! + "launch4j/lib/commons-beanutils.jar;")
        builder!.append(currentDir! + "launch4j/lib/commons-logging.jar;")
        builder!.append(currentDir! + "launch4j/lib/formsrt.jar;")
        builder!.append(currentDir! + "launch4j/lib/foxtrot.jar;")
        builder!.append(currentDir! + "launch4j/lib/jgoodies-common.jar;")
        builder!.append(currentDir! + "launch4j/lib/jgoodies-forms.jar;")
        builder!.append(currentDir! + "launch4j/lib/jgoodies-looks.jar;")
        builder!.append(currentDir! + "launch4j/lib/xstream.jar")

        classpath! = """" + builder!.toString() + """"
        templateFilePath! = """" + configFile!.getAbsolutePath() + """"

        command! = javaw! + " " + "-classpath" + " " + classpath! + " " + "net.sf.launch4j.Main" + " " + templateFilePath!
        System.out.println("Executing command: " + command!)
        a = scall(command!)
    methodend

classend

packer! = new ExePacker()
packer!.show()

process_events

release