use javax.xml.parsers.DocumentBuilderFactory
use javax.xml.parsers.DocumentBuilder

use org.w3c.dom.Document
use org.w3c.dom.Node
use org.w3c.dom.NodeList
use org.w3c.dom.NamedNodeMap

use org.apache.commons.io.FileUtils
use org.apache.commons.io.IOUtils

use java.net.InetAddress

use java.io.File
use java.util.HashMap
use java.util.Iterator
use java.lang.StringBuilder
use java.io.FileInputStream
use java.io.ByteArrayInputStream

use com.basiscomponents.db.constants.SimpleConstantsResolver

class public ExePacker

    field private static BBjInt buttonWidth% = 75
    field private static BBjInt buttonHeight% = 25

    field private BBjSysGui sysGui!
    field private BBjButton btnBrowse!
    field private BBjButton btnCancel!
    field private BBjButton btnGenerate!
    field private BBjTopLevelWindow window!
    field private BBjInputE inptOutputDirectory!
    field private BBjListEdit leJnlpConfiguration!
    field private BBjProgressBar pgbGenerateProgress!
    field private BBjCheckBox chbClearOutputDirectory!
    
    field private BBjInt controlSpacing% = 10

    field private String hostName!
    field private BBjInt port%
    field private BBjInt ssl%
    field private String userName!
    field private String password!

    field private BBjVector jnlpApplications!
    field private BBjVector jarNameList!

    method public ExePacker()
        rem TODO Try "admin" & "admin123" if that doesn't work prompt the user for the Credentials
        rem TODO validate the entries by checking if the BBjAdmin object can be instanciated with the default values

        #hostName! = "localhost"
        #port% = 2002
        #ssl% = 0
        #userName! = "admin"
        #password! = "admin123"

        #initGui()
    methodend

    method private void initGui()
        print 'cs'
        print 'hide'
    
        window_width = 400
        window_height = 150
    
        #sysGui! = BBjAPI().openSysGui("X0")
        #window! = #sysGui!.addWindow(100,200,window_width,window_height,"JNLP .exe Packer", $00000003$)
        
        rem Row 1
        x_pos = 15
        y_pos = 15
        space = #controlSpacing%
        
        #window!.addStaticText(#window!.getAvailableControlID(), x_pos, y_pos+2, 100, 15, "JNLP Application:")
        x_pos = x_pos + space + 100

        #leJnlpConfiguration! = #window!.addListEdit(#window!.getAvailableControlID(), x_pos, y_pos, (window_width - x_pos - 10), 200, "")
        x_pos = x_pos + space + 175
        
        #initJnlpApplicationListEdit(#leJnlpConfiguration!)
        
        rem Row 2
        x_pos = 15
        y_pos = 40 
        
        rem Managing the Output Directory
        #window!.addStaticText(#window!.getAvailableControlID(), x_pos, y_pos + 2, 150, 15, "Output Directory: ")
        x_pos = x_pos + space + 100
        
        #inptOutputDirectory! = #window!.addInputE(#window!.getAvailableControlID(), x_pos, y_pos, (window_width - x_pos - space - #buttonWidth% -10), 20, "")
        x_pos = x_pos + space + (window_width - x_pos - space - #buttonWidth% -10)
        
        rem #inptOutputDirectory!.setText("D:\tmp\packer\output")

        #btnBrowse! = #window!.addButton(#window!.getAvailableControlID(), x_pos, y_pos-2, #buttonWidth%, #buttonHeight%, "Browse")
        x_pos = x_pos + space + #buttonWidth%
        
        #btnBrowse!.setCallback(BBjAPI.ON_BUTTON_PUSH, #this!, "browseButtonPush")
              
        rem Row 3
        x_pos = 15
        y_pos = 65 
        
        #chbClearOutputDirectory! = #window!.addCheckBox(#window!.getAvailableControlID(), x_pos, y_pos, window_width - (2*space), 20, "Clear Output directory")
        #chbClearOutputDirectory!.setSelected(1)
        
        rem #window!.addStaticText(#window!.getAvailableControlID(), x_pos, y_pos+2, 100, 15, ".exe Name: ")
       
        rem Row 3
        x_pos = 15
        y_pos = 90
        
        #pgbGenerateProgress! = #window!.addProgressBar(#window!.getAvailableControlID(), x_pos, y_pos, window_width - (2 * space), 20)
        #pgbGenerateProgress!.setVisible(0)
        
       
        #btnGenerate! = #window!.addButton(#window!.getAvailableControlID(), window_width - (2 * space) - (2 * #buttonWidth%), 120, #buttonWidth%, #buttonHeight%, "Generate")
        #btnGenerate!.setCallback(BBjAPI.ON_BUTTON_PUSH, #this!, "generateButtonPush")

        #btnCancel! = #window!.addButton(#window!.getAvailableControlID(), window_width - space - #buttonWidth%, 120, #buttonWidth%, #buttonHeight%, "Cancel")
        #btnCancel!.setCallback(BBjAPI.ON_BUTTON_PUSH, #this!, "cancelButtonPush")

        #window!.setCallback(BBjAPI.ON_CLOSE, #this!, "closeWindow")
        #window!.setCallback(BBjAPI.ON_RESIZE, #this!, "resizeWindow")

        #window!.setVisible(0)
    methodend
    
    method public void resizeWindow(BBjResizeEvent event!)
        space = #controlSpacing%
        window_width = #window!.getWidth()
        
        #leJnlpConfiguration!.setSize(window_width - #leJnlpConfiguration!.getX() - space, 200)
        
        size = window_width - #leJnlpConfiguration!.getX() - space - #buttonWidth% - space
        #inptOutputDirectory!.setSize(size, 20)
        
        #btnBrowse!.setLocation(window_width - #buttonWidth% - space, 40-2)
        
        #pgbGenerateProgress!.setSize(window_width - (2 * space), 20)
        
        #btnGenerate!.setLocation(window_width - (2 * space) - (2 * #buttonWidth%), 120)
        #btnCancel!.setLocation(window_width - space - #buttonWidth%, 120)
    methodend
    
    method private void initJnlpApplicationListEdit(BBjListEdit edit!)
        declare BBjAdminList list!
        #jnlpApplications! = #getJnlpApplications()

        it! = #jnlpApplications!.iterator()
        while(it!.hasNext())
            edit!.addItem(it!.next().getString(BBjAdminJnlpApplication.NAME))
        wend

        edit!.selectIndex(0)
    methodend

    method public void generateButtonPush(BBjButtonPushEvent event!)
        #pgbGenerateProgress!.setVisible(1)
        #pgbGenerateProgress!.setText("Validating the entries")
        #pgbGenerateProgress!.setValue(0)
    
        rem TODO 1. Validate the entries

        rem Get the output directory file handle
        outputDir! = new File(#inptOutputDirectory!.getText())
        
        if(#chbClearOutputDirectory!.isSelected()) then
            #pgbGenerateProgress!.setText("Clearing the output directory")
            #pgbGenerateProgress!.setValue(5)
            
            rem clearing the output directory's content
            FileUtils.cleanDirectory(outputDir!)
        endif       

        #pgbGenerateProgress!.setText("Copying the jre to the output directory")
        #pgbGenerateProgress!.setValue(20)
        rem Copy the jre into the output directory
        #copyJRE(outputDir!)

        #pgbGenerateProgress!.setText("Copying the native libraries to the output directory")
        #pgbGenerateProgress!.setValue(30)
        
        rem Copy the native libraries into the output folder 
        #copyNativeLibraries(outputDir!, BBjAPI.TRUE)

        #pgbGenerateProgress!.setText("Copying the BBj Jars to the output directory")
        #pgbGenerateProgress!.setValue(45)
        
        rem Copy the BBj jars into the output folder
        #copyBBjJars(outputDir!)
        
        #pgbGenerateProgress!.setText("Creating the config file to create the .exe")
        #pgbGenerateProgress!.setValue(75)

        rem Parse the XML, create a config file in the output folder
        #createConfigFile(outputDir!)
        
        #pgbGenerateProgress!.setText("Creating the .exe file")
        #pgbGenerateProgress!.setValue(90)

        rem Launch the launch4j process to create the .exe
        #generateExe(outputDir!, new File(outputDir!, "config.xml"))
        
        #pgbGenerateProgress!.setText("Exe created")
        #pgbGenerateProgress!.setValue(100)
        
        BBjAPI().createTimer("",2,#this!, "resetProgressBar")
    methodend
    
    method public void resetProgressBar(BBjTimerEvent event!)
        #pgbGenerateProgress!.setText("")
        #pgbGenerateProgress!.setValue(0)
        #pgbGenerateProgress!.setVisible(0)
    methodend

    method private void copyBBjJars(File outputDir!)
        bbjHome! = System.getProperty("basis.BBjHome")
        libFolder! = bbjHome! + "/lib"

        outputLibDir! = new File(outputDir! , "lib")
        
        declare auto BBjAdminJnlpApplication app!
        app! = #jnlpApplications!.get(#leJnlpConfiguration!.getSelectedIndex())

        xml$ = app!.getString(BBjAdminJnlpApplication.XML)

        declare DocumentBuilderFactory factory!
        factory! = DocumentBuilderFactory.newInstance()

        declare DocumentBuilder builder!
        builder! = factory!.newDocumentBuilder()

        declare ByteArrayInputStream stream!
        stream! = new ByteArrayInputStream(new String(xml$).getBytes())

        declare Document document!
        document! = builder!.parse(stream!)
        
        declare Node node!
        rem TODO make sure to grab the correct node 
        node! = document!.getElementsByTagName("resources").item(0)

        declare NodeList nodeList!
        nodeList! = node!.getChildNodes()

        #jarNameList! = new BBjVector()
        
        declare Node subNode!
        declare Node attribute!
        declare NamedNodeMap attributes!

        for i=0 to nodeList!.getLength()-1
            subNode! = nodeList!.item(i)
            if(subNode!.getNodeName().equals("jar") AND subNode!.hasAttributes()) then
                attributes! = subNode!.getAttributes()
                if(attributes! <> null() AND attributes!.getLength() > 0) then
                    attribute! = attributes!.getNamedItem("href")
                    if(attribute! <> null() AND attribute!.getNodeValue().startsWith("basis/")) then
                        #jarNameList!.add(attribute!.getNodeValue().replace("basis/", ""))
                    endif
                endif
            endif
        next i

        rem Add the jars not stated explicitly in the .jnlp file before BBj 17.00
        if(REV < "REV 17.00") then
            #jarNameList!.add("asm-all-5.1.jar")
            #jarNameList!.add("BBjUtil.jar")
            #jarNameList!.add("cglib-3.2.4.jar")
            #jarNameList!.add("guava-16.0.1.jar")
        endif
        
        
        declare Iterator it!
        it! = #jarNameList!.iterator()
        while(it!.hasNext())
            name$ = it!.next()
            rem TODO make sure the jars exist in the libe folder
            FileUtils.copyFile(new File(libFolder!, name$), new File(outputLibDir!, name$))
        wend
        
        rem Copying the WebStartLauncherJar from the current directory to the lib folder
        currentDir! = #getPackerDirectory()
        libsDir! = new File(currentDir!, "libs")

        outputLibDir! = new File(outputDir! , "lib")
        FileUtils.copyFile(new File(libsDir!, "WebstartLauncher.jar"), new File(outputLibDir!, "WebstartLauncher.jar"))
        #jarNameList!.insertItem(0, "WebstartLauncher.jar")
    methodend

    method public void createConfigFile(File outputDir!)
        declare auto BBjAdminJnlpApplication app!
        app! = #jnlpApplications!.get(#leJnlpConfiguration!.getSelectedIndex())

        xml$ = app!.getString(BBjAdminJnlpApplication.XML)

        declare DocumentBuilderFactory factory!
        factory! = DocumentBuilderFactory.newInstance()

        declare DocumentBuilder builder!
        builder! = factory!.newDocumentBuilder()

        declare ByteArrayInputStream stream!
        stream! = new ByteArrayInputStream(new String(xml$).getBytes())

        declare Document document!
        document! = builder!.parse(stream!)

        arguments! = #getProgramArguments(document!)
        arguments! = arguments!.replace("{-hostname-}", InetAddress.getLocalHost().getHostName()).trim()
        arguments! = arguments!.replaceAll("\\", "/")

        templateFile! = new File(#getPackerDirectory(), "template.xml")

        constantResolver! = new SimpleConstantsResolver()
       
        resFolder! = new File(outputdir!, "res")
       
        declare auto Node node!
        
        if(#jarNameList! <> null() AND !#jarNameList!.isEmpty()) then
            declare StringBuilder sb!
            sb! = new StringBuilder()
            
            for i=0 to #jarNameList!.size()-1
                sb!.append($09$ + $09$ + "<cp>lib/" + #jarNameList!.get(i) + "</cp>")
                if(i+1 < #jarNameList!.size()) then
                    sb!.append($0A$)
                endif
            next i
            
            constantResolver!.put("CP_jars", sb!.toString())
        else
            throw "An Error occurred while setting the Classpath jars", 255
        endif
       
        constantResolver!.put("Icon", "")   
REM         constantResolver!.put("SplashIcon", "")    
         
        nodeList! = document!.getElementsByTagName("icon")
        if(nodeList!.getLength() > 0) then
            for i=0 to nodeList!.getLength() -1
                node! = nodeList!.item(i)
                if(node!.hasAttributes()) then
                    hrefNode! = node!.getAttributes().getNamedItem("href")
                    kindNode! = node!.getAttributes().getNamedItem("kind")
                    if(kindNode! <> null() AND hrefNode! <> null()) then
                        if(kindNode!.getTextContent() = "shortcut") then
                            FileUtils.copyURLToFile(new java.net.URL(hrefNode!.getTextContent()), new File(resFolder!, "shortcut.ico"))
                            constantResolver!.put("Icon", "res/shortcut.ico") 
                        endif
                        
REM                         if(kindNode!.getTextContent() = "splash") then
REM                             FileUtils.copyURLToFile(new java.net.URL(hrefNode!.getTextContent()), new File(resFolder!, "splash.bmp"))
REM                             constantResolver!.put("SplashIcon", "res/splash.bmp") 
REM                         endif
                    endif
                endif
            next i
        endif
        
        constantResolver!.put("LookAndFeel", "")
        if(arguments!.contains("-LF")) then
            startIndex = arguments!.indexOf("-LF")
            endIndex = arguments!.indexOf(" ", startIndex+1)
            
            rem remove the -LF and add -Dswing.defaultlaf= as prefix
            lf! = arguments!.substring(startIndex, endIndex)
            lf! = lf!.trim()
            lf! = lf!.substring(3)
            
            if(lf! <> "cross" AND lf! <> "vpro5") then
                lf! = "-Dswing.defaultlaf=" + lf!
                constantResolver!.put("LookAndFeel", lf!)
                arguments! = arguments!.substring(0, startIndex) + arguments!.substring(endIndex)
            endif
        else
            constantResolver!.put("LookAndFeel", "-Dswing.defaultlaf=com.sun.java.swing.plaf.windows.WindowsLookAndFeel")
        endif
        
        constantResolver!.put("CmdLine", arguments!)
        
        file! = new File(outputDir!, app!.getString(BBjAdminJnlpApplication.NAME) + ".exe")
        filePath! = file!.getAbsolutePath()
        filePath! = filePath!.replaceAll("\\", "/")


        constantResolver!.put("outfile", filePath!)

        rem copying the WebstartLauncher.jar to the outpudirectory

        template$ = IOUtils.toString(new FileInputStream(templateFile!), "UTF-8")

        content! = constantResolver!.resolveConstants(template$)

        file! = new File(outputDir!, "config.xml")

        ? file!.getAbsolutePath()

        ch = unt
        open(ch, mode="o_create,o_trunc") file!.getAbsolutePath()
        write(ch) content!
        close(ch)

        rem TODO read the selected the jnlp xml file and extract the important information
        rem read the template and replace the entries with the values from the xml
    methodend

    method private String getProgramArguments(Document document!)
        declare Node node!
        node! = document!.getElementsByTagName("application-desc").item(0)

        declare NodeList nodeList!
        nodeList! = node!.getChildNodes()

        declare Node subNode!

        arguments! = new StringBuilder()

        for i=0 to nodeList!.getLength()-1
            subNode! = nodeList!.item(i)
            if(subNode!.getNodeName().equals("argument")) then
                textContent! = subNode!.getFirstChild().getTextContent()
                if(textContent!.startsWith("-") AND textContent!.length() > 1) then
                    arguments!.append(" " + """" + subNode!.getFirstChild().getTextContent() + """")    
                else
                    arguments!.append(" " + subNode!.getFirstChild().getTextContent())
                endif                
            endif
        next i

        methodret arguments!.toString()
    methodend

    method public void cancelButtonPush(BBjButtonPushEvent event!)
        #closeWindow(null())
    methodend

    method private void copyJRE(File outputDirectory!)
        javaHome! = System.getProperty("java.home")
        FileUtils.copyDirectory(new File(javaHome!),new File(outputDirectory!, "jre"))
    methodend

    method private void copyNativeLibraries(File outputDirectory!, java.lang.Boolean use64bit!)
        bbjHome! = System.getProperty("basis.BBjHome")
        libFolder! = bbjHome! + "/lib"
        if(use64bit!) then
            libFolder! = libFolder! + "/64"
        else
            libFolder! = libFolder! + "/32"
        endif

        FileUtils.copyDirectory(new File(libFolder!), new File(outputDirectory!, "/lib/native"))
    methodend

    method public void show()
       #window!.setVisible(1)
    methodend

    method public void closeWindow(BBjCloseEvent event!)
        #window!.destroy()
        release
    methodend

    method private File getPackerDirectory()
        declare File file!
        file! = new File(pgm(-1))
        
        methodret file!.getParentFile()
    methodend

    rem /**
    rem  * Opens a dialog to select an output directory  
    rem  */
    method public void browseButtonPush(BBjButtonPushEvent event!)
        fileName$ = FILEOPEN("Output Directory Selection", dsk(""),"","","",1)
        if(fileName$ <> "::CANCEL::") then
            #inptOutputDirectory!.setText(fileName$)
        endif
    methodend

    rem /**
    rem  * Executes the launch4j jar with the created config.xml file in order to create the 
    rem  * .exe file.
    rem  */
    method private void generateExe(File outputDir!, File configFile!)
        javaHome! = System.getProperty("java.home")
        javaw! = javaHome! + "/bin/javaw.exe"

        currentDir! = #getPackerDirectory().getAbsolutePath() + File.separator

        builder! = new StringBuilder(currentDir! + "launch4j/launch4j.jar;")
        builder!.append(currentDir! + "launch4j/lib/ant.jar;")
        builder!.append(currentDir! + "launch4j/lib/commons-beanutils.jar;")
        builder!.append(currentDir! + "launch4j/lib/commons-logging.jar;")
        builder!.append(currentDir! + "launch4j/lib/formsrt.jar;")
        builder!.append(currentDir! + "launch4j/lib/foxtrot.jar;")
        builder!.append(currentDir! + "launch4j/lib/jgoodies-common.jar;")
        builder!.append(currentDir! + "launch4j/lib/jgoodies-forms.jar;")
        builder!.append(currentDir! + "launch4j/lib/jgoodies-looks.jar;")
        builder!.append(currentDir! + "launch4j/lib/xstream.jar")

        command! = """" + javaw! + """ " + "-classpath" + " " + builder!.toString() + " " + "net.sf.launch4j.Main" + " " + configFile!.getAbsolutePath()
        System.out.println("Executing command: " + command!)
        rem ? """" + javaw! + """ " + "-classpath" + " " + builder!.toString() + " " + "net.sf.launch4j.Main" + " " + configFile!.getAbsolutePath()
        a = scall(command!)
    methodend

    rem /**
    rem  * Returns a BBjVector with all available JNLP Configurations
    rem  * 
    rem  * @return vector! The vector object with all the JNLP Configurations 
    rem  */
    method public BBjVector getJnlpApplications()

        declare BBjAdminBase adminBase!
        adminBase! = BBjAdminFactory.getBBjAdmin(InetAddress.getByName(#hostName!), #port%, #ssl%, #userName!, #password!)

        declare BBjAdminJnlpConfiguration jnlpConfirguration!
        jnlpConfiguration! = adminBase!.getJnlpConfiguration()

        declare auto BBjAdminList list!
        list! = jnlpConfiguration!.getApplications()

        declare BBjVector vector!
        vector! = new BBjVector()

        it! = list!.iterator()
        while(it!.hasNext())
            vector!.addItem(it!.next())
        wend

        methodret vector!
    methodend

classend

packer! = new ExePacker()
packer!.show()

process_events

release