use javax.xml.parsers.DocumentBuilderFactory
use javax.xml.parsers.DocumentBuilder

use org.w3c.dom.Document
use org.w3c.dom.Node
use org.w3c.dom.NodeList
use org.w3c.dom.NamedNodeMap

use org.apache.commons.io.FileUtils
use org.apache.commons.io.IOUtils

use java.net.InetAddress

use java.io.File
use java.util.HashMap
use java.util.Iterator
use java.lang.StringBuilder
use java.io.FileInputStream
use java.io.ByteArrayInputStream

use java.io.FileWriter
use java.io.IOException
use java.io.InputStream
use java.io.OutputStream
use java.io.BufferedReader
use java.io.FileOutputStream
use java.io.InputStreamReader
use java.io.BufferedInputStream
use java.io.BufferedOutputStream
use java.io.ByteArrayOutputStream

use java.util.zip.ZipEntry
use java.util.zip.ZipInputStream

use ::src/AdminAPICredentialWindow.bbj::AdminAPICredentialWindow

use com.basis.api.admin.BBjAdminSet
use com.basis.api.admin.BBjAdminServer
use com.basis.api.admin.BBjAdminServer.ServerType

use com.basiscomponents.db.constants.SimpleConstantsResolver

class public ExePacker

    field private static String LAST_OUTPUT_DIRECTORY_USER_PROPERTY! = "JnlpExePackerLastOutputDirectory"
    field private static String LAST_JNLP_APPLICATION_USER_PROPERTY! = "JnlpExePackerLastApplicationName"

    field private BBjInt controlSpacing% = 10
    field private static BBjInt buttonWidth% = 75
    field private static BBjInt buttonHeight% = 25

    field private BBjSysGui sysGui!
    field private BBjButton btnBrowse!
    field private BBjButton btnCancel!
    field private BBjButton btnGenerate!
    field private BBjButton btnJreBrowse!
    field private BBjCheckBox chbIs32bit!
    field private BBjTopLevelWindow window!
    field private BBjInputE inpeJreDirectory!
    field private BBjListEdit leServerHostName!
    field private BBjInputE inpeOutputDirectory!
    field private BBjCheckBox chbEmulateWebstart!
    field private BBjListEdit leJnlpConfiguration!
    field private BBjProgressBar pgbGenerateProgress!
    field private BBjCheckBox chbClearOutputDirectory!

    field private BBjVector jarNameList!
    field private BBjVector jnlpApplications!

    field private HashMap adminBaseMap!
    field private BBjAdminBase defaultAdminBase!

    method public ExePacker()
        #sysGui! = BBjAPI().openSysGui("X0")

        rem Adding the path to this program into the prefix so that the required programs will be found
        prefix """" + #getPackerDirectory().getAbsolutePath() + "/"" " + pfx

        rem either returns a valid object or throws an exception
        #defaultAdminBase! = #getDefaultAdminBase()

        #adminBaseMap!= new HashMap()

        #initGui()
    methodend

    method private BBjAdminBase getDefaultAdminBase()
        methodret #getAdminBase("localhost")
    methodend

    method public BBjAdminBase getAdminBase(String server!)
        rem setting the credentials to the default because in most cases these are still used
        username! = "admin"
        password! = "admin123"

        declare AdminAPICredentialWindow win!
        win! = new AdminAPICredentialWindow()

        declare BBjAdminBase adminBase!
        declare InetAddress address!

        address! = InetAddress.getByName(server!)

        counter = 0
        validCredentials! = Boolean.FALSE
        while(adminBase! = null() AND counter < 5)
            adminBase! = BBjAdminFactory.getBBjAdmin(address!, username!, password!, err=*next)

            rem exiting the loop once we get a valid BBjAdminBase object
            if(adminBase! <> null()) then
                break
            endif

            errorMessage! = errmes(-1)
            if(!errorMessage!.contains("failed login")) then
                throw "Failed to connect to the Admin API" + $0A$ + errorMessage!, 300
            endif

            if(counter <> 0) then
                answer = msgbox("Failed to connect to the Admin API: Invalid Credentials")
            endif

            win!.open(#sysGui!)

            username! = win!.getUsername()
            password! = win!.getPassword()
            counter = counter + 1
        wend

        if(counter = 5) then
            throw "Connection Failed: To many invalid attempts", 300
        endif

        methodret adminBase!
    methodend

    method private void initGui()
        print 'cs'
        rem print 'hide'

        window_width = 450
        window_height = 290

        #window! = #sysGui!.addWindow(#sysGui!.getAvailableContext(), 200, 200, window_width, window_height, "JNLP .exe Packer", $00010003$)

        rem Row 1
        x_pos = 15
        y_pos = 15
        space = #controlSpacing%

        #window!.addStaticText(#window!.getAvailableControlID(), x_pos, y_pos+2, 100, 15, "Server Host Name:")
        x_pos = x_pos + space + 100

        input_width = (window_width - x_pos - space*2 - #buttonWidth%)

        #leServerHostName! = #window!.addListEdit(#window!.getAvailableControlID(), x_pos, y_pos-3, input_width, 200, "localhost")
        x_pos = x_pos + space + 100

        #leServerHostName!.setEditable(1)
        #leServerHostName!.selectIndex(0)
        #leServerHostName!.setCallback(BBjAPI.ON_LIST_SELECT, #this!, "serverHostNameListSelect")
        #leServerHostName!.setCallback(BBjAPI.ON_LOST_FOCUS, #this!, "serverHostNameLostFocus")

        rem Row 2
        x_pos = 15
        y_pos = 45

        #window!.addStaticText(#window!.getAvailableControlID(), x_pos, y_pos+2, 100, 15, "JNLP Application:")
        x_pos = x_pos + space + 100

        #leJnlpConfiguration! = #window!.addListEdit(#window!.getAvailableControlID(), x_pos, y_pos-2, input_width, 200, "")
        x_pos = x_pos + space + 175

        #initJnlpApplicationListEdit(#leJnlpConfiguration!)

        rem Row 2
        x_pos = 15
        y_pos = 75

        rem Managing the JRE Directory
        #window!.addStaticText(#window!.getAvailableControlID(), x_pos, y_pos + 2, 150, 15, "JRE Directory:")
        x_pos = x_pos + space + 100

        #inpeJreDirectory! = #window!.addInputE(#window!.getAvailableControlID(), x_pos, y_pos-3, input_width, 20, "")
        x_pos = x_pos + space + (window_width - x_pos - space - #buttonWidth% -10)

        #inpeJreDirectory!.setText(System.getProperty("java.home", err=*next))

        #btnJreBrowse! = #window!.addButton(#window!.getAvailableControlID(), x_pos, y_pos-5, #buttonWidth%, #buttonHeight%, "Browse")
        x_pos = x_pos + space + #buttonWidth%

        #btnJreBrowse!.setCallback(BBjAPI.ON_BUTTON_PUSH, #this!, "browseJreDirectoryButtonPush")

        rem Row 3
        x_pos = 15
        y_pos = 97

        #chbIs32bit! = #window!.addCheckBox(#window!.getAvailableControlID(), x_pos, y_pos, window_width - (2*space), 20, "Is 32 bit JRE")
        #chbIs32bit!.setSelected(0)

        rem Row 4
        x_pos = 15
        y_pos = 135

        rem Managing the Output Directory
        #window!.addStaticText(#window!.getAvailableControlID(), x_pos, y_pos + 2, 150, 15, "Output Directory:")
        x_pos = x_pos + space + 100

        #inpeOutputDirectory! = #window!.addInputE(#window!.getAvailableControlID(), x_pos, y_pos-2, input_width, 20, "")
        x_pos = x_pos + space + (window_width - x_pos - space - #buttonWidth% -10)

        outputDir! = bbjapi().getThinClient().getUserProperty(#LAST_OUTPUT_DIRECTORY_USER_PROPERTY!, err=*next)
        if(outputDir! <> null()) then
            #inpeOutputDirectory!.setText(outputDir!)
        endif

        #btnBrowse! = #window!.addButton(#window!.getAvailableControlID(), x_pos, y_pos-5, #buttonWidth%, #buttonHeight%, "Browse")
        x_pos = x_pos + space + #buttonWidth%

        #btnBrowse!.setCallback(BBjAPI.ON_BUTTON_PUSH, #this!, "browseButtonPush")

        rem Row 4
        x_pos = 15
        y_pos = 160 -3

        #chbClearOutputDirectory! = #window!.addCheckBox(#window!.getAvailableControlID(), x_pos, y_pos, window_width - (2*space), 20, "Clear Output directory")
        #chbClearOutputDirectory!.setSelected(1)

        rem Row 5
        x_pos = 15
        y_pos = 190-9

        #chbEmulateWebstart! = #window!.addCheckBox(#window!.getAvailableControlID(), x_pos, y_pos, window_width - (2*space), 20, "Emulate Webstart")
        #chbEmulateWebstart!.setToolTipText("This option causes the program to behave as if it was launched via Webstart: Causes the info(3,6) to return 3. " + 
:                                           "This option automatically starts the Thin Client Proxy Server" )

        rem Row 5
        x_pos = 15
        y_pos = 220

        #pgbGenerateProgress! = #window!.addProgressBar(#window!.getAvailableControlID(), x_pos, y_pos, window_width - (2 * space), 20)
        #pgbGenerateProgress!.setVisible(0)

        button_y = window_height - space - #buttonHeight%
        #btnGenerate! = #window!.addButton(#window!.getAvailableControlID(), window_width - (2 * space) - (2 * #buttonWidth%), button_y, #buttonWidth%, #buttonHeight%, "Generate")
        #btnGenerate!.setCallback(BBjAPI.ON_BUTTON_PUSH, #this!, "generateButtonPush")

        #btnCancel! = #window!.addButton(#window!.getAvailableControlID(), window_width - space - #buttonWidth%, button_y, #buttonWidth%, #buttonHeight%, "Cancel")
        #btnCancel!.setCallback(BBjAPI.ON_BUTTON_PUSH, #this!, "cancelButtonPush")

        #window!.setCallback(BBjAPI.ON_CLOSE, #this!, "closeWindow")
        #window!.setCallback(BBjAPI.ON_RESIZE, #this!, "resizeWindow")

        #window!.setVisible(0)
    methodend

    method public void serverHostNameLostFocus(BBjLostFocusEvent event!)
        listEdit! = cast(BBjListEdit, event!.getControl())
        index = listEdit!.getSelectedIndex()

        #serverChanged(listEdit!,index)
    methodend

    method private void serverChanged(BBjListEdit listEdit!, BBjNumber index)
        #enableControls(0)

        if(index < 0) then
            hostname! = listEdit!.getText()

            seterr adminBaseRetrieveHandler
                adminBase! = #getAdminBase(hostname!)
            adminBaseRetrieveHandler:
                if(adminBase! = null()) then
                    a = msgbox(errmes(-1))
                    #enableControls(1)
                    listEdit!.focus()
                    methodret
                endif

            #adminBaseMap!.put(hostname!, adminBase!)
            listEdit!.addItem(hostname!)
            listEdit!.selectIndex(listEdit!.getItemCount()-1)
        endif

        #enableControls(1)

        adminBase! = #adminBaseMap!.getOrDefault(listEdit!.getText(), #defaultAdminBase!)

        declare BBjAdminList list!
        #jnlpApplications! = #getJnlpApplications(adminBase!)

        #leJnlpConfiguration!.removeAllItems()
        it! = #jnlpApplications!.iterator()
        while(it!.hasNext())
            #leJnlpConfiguration!.addItem(it!.next().getString(BBjAdminJnlpApplication.NAME))
        wend

        #leJnlpConfiguration!.selectIndex(0)
    methodend

    method public void serverHostNameListSelect(BBjListSelectEvent event!)
        listEdit! = cast(BBjListEdit, event!.getControl())
        index = listEdit!.getSelectedIndex()

        #serverChanged(listEdit!,index)
    methodend

    method public void browseJreDirectoryButtonPush(BBjButtonPushEvent event!)
        path! = #inpeJreDirectory!.getText()
        fileOpenPath! = dsk("")

        if(path! <> "") then
            declare File directory!
            directory! = new File(path!)

            if(directory!.exists() AND directory!.isDirectory()) then
                fileOpenPath! = directory!.getAbsolutePath()
            endif
        endif


        directoryPath$ = FILEOPEN("JRE Directory Selection", fileOpenPath!,"","","",1)
        if(directoryPath$ <> "::CANCEL::") then
            #inpeJreDirectory!.setText(directoryPath$)
        endif
    methodend

    method public void enableControls(Boolean enabled!)
        #leJnlpConfiguration!.setEnabled(enabled!)

        #inpeJreDirectory!.setEnabled(enabled!)
        #btnJreBrowse!.setEnabled(enabled!)
        #chbIs32bit!.setEnabled(enabled!)

        #inpeOutputDirectory!.setEnabled(enabled!)
        #btnBrowse!.setEnabled(enabled!)
        #chbClearOutputDirectory!.setEnabled(enabled!)

        #chbEmulateWebstart!.setEnabled(enabled!)

        #btnGenerate!.setEnabled(enabled!)
    methodend

    method public void resizeWindow(BBjResizeEvent event!)
        space = #controlSpacing%
        window_width = #window!.getWidth()
        window_height = #window!.getHeight()

        rem #leJnlpConfiguration!.setSize(window_width - #leJnlpConfiguration!.getX() - space, 200)

        #inpeJreDirectory!.setSize((window_width - #inpeJreDirectory!.getX() - (2*space) - #buttonWidth%), #inpeJreDirectory!.getHeight())
        #btnJreBrowse!.setLocation(#inpeJreDirectory!.getX() + #inpeJreDirectory!.getWidth() + space, #btnJreBrowse!.getY())

        size = window_width - #leJnlpConfiguration!.getX() - space - #buttonWidth% - space
        #inpeOutputDirectory!.setSize(size, 20)

        #btnBrowse!.setLocation(window_width - #buttonWidth% - space, #btnBrowse!.getY())

        #pgbGenerateProgress!.setSize(window_width - (2 * space), 20)

        button_y = window_height - space - #buttonHeight%
        #btnGenerate!.setLocation(window_width - (2 * space) - (2 * #buttonWidth%), button_y)
        #btnCancel!.setLocation(window_width - space - #buttonWidth%, button_y)
    methodend

    method private void initJnlpApplicationListEdit(BBjListEdit edit!)
        declare BBjAdminList list!
        #jnlpApplications! = #getJnlpApplications(#defaultAdminBase!)

        declare HashMap nameMap!
        nameMap! = new HashMap()

        declare BBjAdminJnlpApplication app!

        currentIndex = 0
        it! = #jnlpApplications!.iterator()
        while(it!.hasNext())
            app! = cast(BBjAdminJnlpApplication, it!.next())
            appName! = app!.getString(BBjAdminJnlpApplication.NAME)

            edit!.addItem(appName!)
            nameMap!.put(appName!, currentIndex)
            currentIndex = currentIndex +1
        wend

        index = 0
        declare BBjThinClient thinClient!
        thinClient! = bbjapi().getThinClient()
        lastApplicationName! = thinClient!.getUserProperty(#LAST_JNLP_APPLICATION_USER_PROPERTY!, err=*next)
        if(lastApplicationName! <> null()) then
            index = cast(BBjNumber, nameMap!.getOrDefault(lastApplicationName!, 0))
        endif

        edit!.selectIndex(index)
    methodend

    method public void generateButtonPush(BBjButtonPushEvent event!)
        #pgbGenerateProgress!.setVisible(1)
        #pgbGenerateProgress!.setText("Validating the entries")
        #pgbGenerateProgress!.setValue(0)

        rem Get the output directory file handle
        declare File outputDir!
        outputDir! = new File(#inpeOutputDirectory!.getText())

        declare BBjThinClient thinClient!
        thinClient! = bbjapi().getThinClient()
        thinClient!.setUserProperty(#LAST_OUTPUT_DIRECTORY_USER_PROPERTY!, outputDir!.getAbsolutePath())

        declare auto BBjAdminJnlpApplication app!
        app! = #jnlpApplications!.get(#leJnlpConfiguration!.getSelectedIndex())
        thinClient!.setUserProperty(#LAST_JNLP_APPLICATION_USER_PROPERTY!, app!.getString(BBjAdminJnlpApplication.NAME))

        if(#chbClearOutputDirectory!.isSelected()) then
            #pgbGenerateProgress!.setText("Clearing the output directory")
            #pgbGenerateProgress!.setValue(5)

            rem clearing the output directory's content
            FileUtils.cleanDirectory(outputDir!)
        endif

        #pgbGenerateProgress!.setText("Copying the jre to the output directory")
        #pgbGenerateProgress!.setValue(20)
        rem Copy the jre into the output directory
        #copyJRE(outputDir!)

        #pgbGenerateProgress!.setText("Copying the native libraries to the output directory")
        #pgbGenerateProgress!.setValue(30)

        rem Copy the native libraries into the output folder 
        #copyNativeLibraries(outputDir!, !#chbIs32bit!.isSelected())

        #pgbGenerateProgress!.setText("Copying the BBj Jars to the output directory")
        #pgbGenerateProgress!.setValue(45)

        rem Copy the BBj jars into the output folder
        #copyBBjJars(outputDir!)

        #pgbGenerateProgress!.setText("Creating the config file to create the .exe")
        #pgbGenerateProgress!.setValue(75)

        rem Parse the XML, create a config file in the output folder
        #createConfigFile(outputDir!)

        #pgbGenerateProgress!.setText("Creating the .exe file")
        #pgbGenerateProgress!.setValue(90)

        rem Launch the launch4j process to create the .exe
        #generateExe(outputDir!, new File(outputDir!, "config.xml"))

        #pgbGenerateProgress!.setText("Exe created")
        #pgbGenerateProgress!.setValue(100)

        BBjAPI().createTimer("",2,#this!, "resetProgressBar")
    methodend

    method public void resetProgressBar(BBjTimerEvent event!)
        if(!#pgbGenerateProgress!.isDestroyed()) then
            #pgbGenerateProgress!.setText("")
            #pgbGenerateProgress!.setValue(0)
            #pgbGenerateProgress!.setVisible(0)
        endif
    methodend

    method private void copyBBjJars(File outputDir!)
        declare BBjAdminJnlpApplication app!
        app! = cast(BBjAdminJnlpApplication, #jnlpApplications!.get(#leJnlpConfiguration!.getSelectedIndex()))
    
        declare Document document!
        document! = #getDocument(app!)
        
        bbjHome! = System.getProperty("basis.BBjHome")
        libFolder! = bbjHome! + "/lib"

        outputLibDir! = new File(outputDir! , "lib")

        declare Node node!
        node! = document!.getElementsByTagName("resources").item(0)

        declare NodeList nodeList!
        nodeList! = node!.getChildNodes()

        #jarNameList! = new BBjVector()

        declare Node subNode!
        declare Node attribute!
        declare NamedNodeMap attributes!

        for i=0 to nodeList!.getLength()-1
            subNode! = nodeList!.item(i)
            
            if(!subNode!.hasAttributes()) then
                continue
            endif
            
            if(subNode!.getNodeName().equals("jar")) then
                attributes! = subNode!.getAttributes()
                if(attributes! <> null() AND attributes!.getLength() > 0) then
                    attribute! = attributes!.getNamedItem("href")
                    if(attribute! <> null() AND attribute!.getNodeValue().startsWith("basis/")) then
                        #jarNameList!.add(attribute!.getNodeValue().replace("basis/", ""))
                    endif
                endif
            endif
        next i

        declare BBjAdminBase adminBase!
        adminBase! = cast(BBjAdminBase,#adminBaseMap!.getOrDefault(#leServerHostName!.getText(), #defaultAdminBase!))

        if(adminBase! <> #defaultAdminBase!) then
            url! = "http://" + #getHostName(adminBase!) +":" + #getHttpPort(adminBase!) + "/"

            serverREV! = #getServerREV(adminBase!)

            if(serverREV! < "REV 17.00") then
                a = msgbox("Unsuported BBj Version: " + serverREV! + $0A$ + "The Remote Server's Revision must be 17 or higher.")
                methodret
            endif

            declare Iterator it!
            it! = #jarNameList!.iterator()
            while(it!.hasNext())
                name$ = it!.next()
                print "Downloading " + name$ + " from " + url! + "basis/" + name$
                FileUtils.copyURLToFile(new java.net.URL(url! + "basis/" + name$), new File(outputLibDir!, name$))
            wend
        else
            rem Add the jars not stated explicitly in the .jnlp file before BBj 17.00
            if(REV > "REV 16.00" AND REV < "REV 17.00") then
                #jarNameList!.add("asm-all-5.1.jar")
                #jarNameList!.add("BBjUtil.jar")
                #jarNameList!.add("cglib-3.2.4.jar")
                #jarNameList!.add("guava-16.0.1.jar")
            endif

            declare Iterator it!
            it! = #jarNameList!.iterator()
            while(it!.hasNext())
                name$ = it!.next()
                print "copying " + name$
                FileUtils.copyFile(new File(libFolder!, name$), new File(outputLibDir!, name$))
            wend
        endif

        rem Copying the WebStartLauncherJar from the current directory to the lib folder
        currentDir! = #getPackerDirectory()
        libDir! = new File(currentDir!, "lib")

        outputLibDir! = new File(outputDir! , "lib")
        FileUtils.copyFile(new File(libDir!, "WebstartLauncher.jar"), new File(outputLibDir!, "WebstartLauncher.jar"))
        #jarNameList!.insertItem(0, "WebstartLauncher.jar")
    methodend

    method public void createConfigFile(File outputDir!)
        declare BBjAdminJnlpApplication app!
        app! = cast(BBjAdminJnlpApplication, #jnlpApplications!.get(#leJnlpConfiguration!.getSelectedIndex()))
    
        declare Document document!
        document! = #getDocument(app!)
    
        arguments! = #getProgramArguments(document!)

        rem Adding the flag telling the WebstartLauncher to Emulate the original Webstart or not
        rem Adding this option causes the info(3,6) to return 3. If this flag is omitted, info(3,6) retuns 1
        if(#chbEmulateWebstart!.isSelected()) then
            arguments! = "{-EmulateWebStart-}" + arguments!
        endif

        declare BBjAdminBase adminBase!
        adminBase! = cast(BBjAdminBase,#adminBaseMap!.getOrDefault(#leServerHostName!.getText(), #defaultAdminBase!))

        rem retrieving the hostname from the BBjAdminBase object
        hostname! = #getHostName(adminBase!)

        rem replacing the hostname placeholder with the actual hostname if present
        arguments! = arguments!.replace("{-hostname-}", hostname!).trim()
        arguments! = arguments!.replaceAll("\\", "/")

        rem Creating the launch4j template File handle
        templateFile! = new File(#getPackerDirectory(), "template.xml")

        constantResolver! = new SimpleConstantsResolver()
        resFolder! = new File(outputdir!, "res")

        rem replacing the JVM arguments placeholder with the user defined jvm arguments
        constantResolver!.put("JvmArguments", #getJvmArguments(document!))

        if(#jarNameList! <> null() AND !#jarNameList!.isEmpty()) then
            declare StringBuilder sb!
            sb! = new StringBuilder()

            for i=0 to #jarNameList!.size()-1
                sb!.append($09$ + $09$ + "<cp>lib/" + #jarNameList!.get(i) + "</cp>")
                if(i+1 < #jarNameList!.size()) then
                    sb!.append($0A$)
                endif
            next i

            constantResolver!.put("CP_jars", sb!.toString())
        else
            throw "An Error occurred while setting the Classpath jars", 300
        endif

        constantResolver!.put("Icon", "")
        rem constantResolver!.put("SplashIcon", "")    

        nodeList! = document!.getElementsByTagName("icon")
        if(nodeList!.getLength() > 0) then
            for i=0 to nodeList!.getLength() -1
                node! = nodeList!.item(i)

                if(node!.hasAttributes()) then
                    hrefNode! = node!.getAttributes().getNamedItem("href")
                    kindNode! = node!.getAttributes().getNamedItem("kind")

                    if(kindNode! <> null() AND hrefNode! <> null()) then
                        if(kindNode!.getTextContent() = "shortcut") then
                            url! = hrefNode!.getTextContent()

                            fileType! = url!.substring(url!.lastIndexOf("."))
                            if(fileType! <> ".ico") then
                                a = msgbox("Invalid Shortcut Icon: The application's shortcut icon must be a .ico file." + $0A$ + "The specified icon is omitted.")
                                break
                            endif

                            if(!url!.startsWith("http://")) then
                                url! = "http://" + #getHostName(adminBase!) +":" + #getHttpPort(adminBase!) + "/" + url!
                            endif

                            FileUtils.copyURLToFile(new java.net.URL(url!), new File(resFolder!, "shortcut.ico"))
                            constantResolver!.put("Icon", "res/shortcut.ico")
                        endif

                        rem if(kindNode!.getTextContent() = "splash") then
                        rem    FileUtils.copyURLToFile(new java.net.URL(hrefNode!.getTextContent()), new File(resFolder!, "splash.bmp"))
                        rem    constantResolver!.put("SplashIcon", "res/splash.bmp") 
                        rem endif
                    endif
                endif
            next i
        endif

        constantResolver!.put("LookAndFeel", "")
        if(arguments!.contains("-LF")) then
            startIndex = arguments!.indexOf("-LF")
            endIndex = arguments!.indexOf(" ", startIndex+1)

            rem remove the -LF and add -Dswing.defaultlaf= as prefix
            lf! = arguments!.substring(startIndex, endIndex)
            lf! = lf!.trim()
            lf! = lf!.substring(3)

            if(lf! <> "cross" AND lf! <> "vpro5") then
                lf! = "-Dswing.defaultlaf=" + lf!
                constantResolver!.put("LookAndFeel", lf!)
                arguments! = arguments!.substring(0, startIndex) + arguments!.substring(endIndex)
            endif
        else
            rem Setting the default LF
            constantResolver!.put("LookAndFeel", "-Dswing.defaultlaf=com.sun.java.swing.plaf.windows.WindowsLookAndFeel")
        endif

        constantResolver!.put("CmdLine", arguments!)
        
        constantResolver!.put("is64bit", "true")
        
        if(#chbIs32bit!.isSelected()) then
            constantResolver!.put("is64bit", "false")
        endif
        

        file! = new File(outputDir!, app!.getString(BBjAdminJnlpApplication.NAME) + ".exe")
        filePath! = file!.getAbsolutePath()
        filePath! = filePath!.replaceAll("\\", "/")

        constantResolver!.put("outfile", filePath!)

        rem copying the WebstartLauncher.jar to the outpudirectory
        template$ = IOUtils.toString(new FileInputStream(templateFile!), "UTF-8")

        content! = constantResolver!.resolveConstants(template$)

        file! = new File(outputDir!, "config.xml")

        rem writing the config.xml file into the output directory 
        ch = unt
        open(ch, mode="o_create,o_trunc") file!.getAbsolutePath()
        write(ch) content!
        close(ch)
    methodend
    
    method public String getJvmArguments(Document document!)
        declare Node node!
        node! = document!.getElementsByTagName("resources").item(0)

        declare NodeList nodeList!
        nodeList! = node!.getChildNodes()

        declare Node subNode!
        declare Node attribute!
        declare NamedNodeMap attributes!
        
        declare StringBuilder builder!
        builder! = new StringBuilder()

        for i=0 to nodeList!.getLength()-1
            subNode! = nodeList!.item(i)
        
            if(subNode!.getNodeName().equals("j2se")) then
                attributes! = subNode!.getAttributes()
                if(attributes! <> null() AND attributes!.getLength() > 0) then
                    attribute! = attributes!.getNamedItem("initial-heap-size")
                    if(attribute! <> null()) then
                        builder!.append("-Xms")
                        builder!.append(attribute!.getNodeValue())
                    endif
                    
                    builder!.append(" ")
                
                    attribute! = attributes!.getNamedItem("java-vm-args")
                    if(attribute! <> null()) then
                        builder!.append(attribute!.getNodeValue())
                    endif
                    
                    builder!.append(" ")
                    
                    attribute! = attributes!.getNamedItem("max-heap-size")
                    if(attribute! <> null()) then
                        builder!.append("-Xmx")
                        builder!.append(attribute!.getNodeValue())
                    endif
                endif
            endif
        next i
        
        methodret builder!.toString().trim()
    methodend
    
    method public Document getDocument(BBjAdminJnlpApplication app!)
        xml$ = app!.getString(BBjAdminJnlpApplication.XML)

        declare DocumentBuilderFactory factory!
        factory! = DocumentBuilderFactory.newInstance()

        declare DocumentBuilder builder!
        builder! = factory!.newDocumentBuilder()

        declare ByteArrayInputStream stream!
        stream! = new ByteArrayInputStream(new String(xml$).getBytes())

        methodret builder!.parse(stream!)
    methodend

    method private String getProgramArguments(Document document!)
        declare Node node!
        node! = document!.getElementsByTagName("application-desc").item(0)

        declare NodeList nodeList!
        nodeList! = node!.getChildNodes()

        declare Node subNode!

        arguments! = new StringBuilder()

        for i=0 to nodeList!.getLength()-1
            subNode! = nodeList!.item(i)
            if(subNode!.getNodeName().equals("argument")) then
                textContent! = subNode!.getFirstChild().getTextContent()
                if(textContent!.startsWith("-") AND textContent!.length() > 1) then
                    arguments!.append(" " + """" + subNode!.getFirstChild().getTextContent() + """")
                else
                    arguments!.append(" " + subNode!.getFirstChild().getTextContent())
                endif
            endif
        next i

        methodret arguments!.toString()
    methodend

    method public void cancelButtonPush(BBjButtonPushEvent event!)
        #closeWindow(null())
    methodend

    method private void copyJRE(File outputDirectory!)
        declare File jreDirectory!
        jreDirectory! = new File(#inpeJreDirectory!.getText())

        if(!jreDirectory!.exists() OR !jreDirectory!.isDirectory()) then
            throw "Invalid JRE directory", 300
        endif

        FileUtils.copyDirectory(jreDirectory!, new File(outputDirectory!, "jre"))
    methodend

    method private void copyNativeLibraries(File outputDirectory!, java.lang.Boolean use64bit!)
        declare File bbjHome!
        bbjHome! = new File(System.getProperty("basis.BBjHome"))

        if(!bbjHome!.exists()) then
            throw "BBj Home was not found", 300
        endif

        declare File libDir!
        libDir! = new File(bbjHome!, "lib")

        if(!libDir!.exists()) then
            throw "The bbj/lib directory was not found", 300
        endif

        declare File webstartDir!
        webstartDir! = new File(libDir!, "webstart")

        if(!webstartDir!.exists()) then
            throw "The bbj/lib/webstart directory was not found", 300
        endif

        declare File webstartJar!
        webstartJar! = new File(webstartDir!, "webstart2166.jar")

        if(!webstartJar!.exists()) then
            throw "The bbj/lib/webstart/webstart2166.jar was not found",300
        endif

        declare File nativeLibDir!
        nativeLibDir! = new File(outputDirectory!, "/lib/native")
        nativeLibDir!.mkdirs()

        rem extracting the native libraries out of the webstart2166.jar
        #extractNativeLibraries(nativeLibDir!, webstartJar!)
        
        rem TODO copy the native libs from the webstart2166 into the lib folder
        declare File directory!
        if(use64bit!) then
            directory! = new File(libDir!, "64")
        else
            directory! = new File(libDir!, "32")
        endif

        FileUtils.copyDirectory(directory!, nativeLibDir!)
    methodend
    
    rem /**
    rem  * Some native libraries are saved in lib/webstart/webstart*.jar files. This method extracts 
    rem  * those native libraries into outputDirectory/lib/native/ directory.
    rem  * 
    rem  * @param nativeLibDir! The directory where to extract the native libraries
    rem  * @param webstartJar! The jar file which contains the native libraries
    rem  */
    method private void extractNativeLibraries(File nativeLibDir!, File webstartJar!)
    
        seterr extractNativeLirariesErrorHandler
            rem Hack to create a byte[1024] in BBj
            declare ByteArrayOutputStream bos!
            bos! = new ByteArrayOutputStream(1024)
            for i=0 to 1024-1
                bos!.write(0)
            next i
            bytes! = bos!.toByteArray()
    
            declare ZipInputStream zipInputStream!
            zipInputStream! = new ZipInputStream(new FileInputStream(webstartJar!))
    
            declare ZipEntry zipEntry!
            zipEntry! = zipInputStream!.getNextEntry()
    
            while(zipEntry! <> null())
                fileName! = zipEntry!.getName()
    
                if(!fileName!.endsWith(".dll")) then
                    zipEntry! = zipInputStream!.getNextEntry()
                    continue
                endif
    
                newFile! = new File(nativeLibDir!, fileName!)
                print "unzip: " + str(fileName!)
    
                byteRead = zipInputStream!.read(bytes!)
    
                rem First checking to avoid creating files instead of folders
                if(byteRead > 0) then
                    fos! = new FileOutputStream(newFile!)
    
                    while(byteRead > 0)
                        fos!.write(bytes!, 0, byteRead)
                        byteRead = zipInputStream!.read(bytes!)
                    wend
    
                    fos!.close()
                endif
    
                zipEntry! = zipInputStream!.getNextEntry()
            wend

        extractNativeLirariesErrorHandler: 
            zipInputStream!.closeEntry(err=*next)
            zipInputStream!.close(err=*next)

            bos!.close(err=*next)
    methodend

    method public void show()
       #window!.setVisible(1)
    methodend

    method public void closeWindow(BBjCloseEvent event!)
        #window!.destroy()
    methodend

    method private File getPackerDirectory()
        declare File file!
        file! = new File(pgm(-1))

        methodret file!.getParentFile()
    methodend

    rem /**
    rem  * Opens a dialog to select an output directory  
    rem  */
    method public void browseButtonPush(BBjButtonPushEvent event!)
        path! = #inpeOutputDirectory!.getText()
        fileOpenPath! = dsk("")

        if(path! <> "") then
            declare File directory!
            directory! = new File(path!)

            if(directory!.exists() AND directory!.isDirectory()) then
                fileOpenPath! = directory!.getAbsolutePath()
            endif
        endif

        directoryPath$ = FILEOPEN("Output Directory Selection", fileOpenPath!,"","","",1)
        if(directoryPath$ <> "::CANCEL::") then
            #inpeOutputDirectory!.setText(directoryPath$)
        endif
    methodend

    rem /**
    rem  * Executes the launch4j jar with the created config.xml file in order to create the 
    rem  * .exe file.
    rem  */
    method private void generateExe(File outputDir!, File configFile!)
        javaHome! = System.getProperty("java.home")
        javaw! = """" + javaHome! + "/bin/javaw.exe" + """"

        currentDir! = #getPackerDirectory().getAbsolutePath() + File.separator

        builder! = new StringBuilder(currentDir! + "launch4j/launch4j.jar;")
        builder!.append(currentDir! + "launch4j/lib/ant.jar;")
        builder!.append(currentDir! + "launch4j/lib/commons-beanutils.jar;")
        builder!.append(currentDir! + "launch4j/lib/commons-logging.jar;")
        builder!.append(currentDir! + "launch4j/lib/formsrt.jar;")
        builder!.append(currentDir! + "launch4j/lib/foxtrot.jar;")
        builder!.append(currentDir! + "launch4j/lib/jgoodies-common.jar;")
        builder!.append(currentDir! + "launch4j/lib/jgoodies-forms.jar;")
        builder!.append(currentDir! + "launch4j/lib/jgoodies-looks.jar;")
        builder!.append(currentDir! + "launch4j/lib/xstream.jar")

        classpath! = """" + builder!.toString() + """"
        templateFilePath! = """" + configFile!.getAbsolutePath() + """"

        command! = javaw! + " " + "-classpath" + " " + classpath! + " " + "net.sf.launch4j.Main" + " " + templateFilePath!
        System.out.println("Executing command: " + command!)
        a = scall(command!)
    methodend

    rem /**
    rem  * Returns a BBjVector with all available JNLP Configurations
    rem  * 
    rem  * @return vector! The vector object with all the JNLP Configurations 
    rem  */
    method public BBjVector getJnlpApplications(BBjAdminBase adminBase!)
        declare BBjAdminJnlpConfiguration jnlpConfirguration!
        jnlpConfiguration! = adminBase!.getJnlpConfiguration()

        declare auto BBjAdminList list!
        list! = jnlpConfiguration!.getApplications()

        declare BBjVector vector!
        vector! = new BBjVector()

        it! = list!.iterator()
        while(it!.hasNext())
            vector!.addItem(it!.next())
        wend

        methodret vector!
    methodend

    method private String getServerREV(BBjAdminBase adminBase!)
        declare BBjAdminConfiguration conf!
        conf! = adminBase!.getConfiguration()

        declare BBjAdminProperty property!

        declare Iterator it!
        it! = conf!.getAdminProperties().iterator()

        while(it!.hasNext())
            property! = cast(BBjAdminProperty, it!.next())

            if(property!.getString(BBjAdminProperty.NAME).equals("com.basis.bbj.version")) then
                methodret property!.getValue().toString().trim()
            endif
        wend

        methodret ""
    methodend

    method private String getHttpPort(BBjAdminBase adminBase!)
        declare BBjAdminSet adminSet!
        adminSet! = adminBase!.getServerConfigurations(ServerType.WEB)

        declare BBjAdminServer server!
        server! = cast(BBjAdminServer, adminSet!.iterator().next())

        methodret server!.getString(BBjAdminServer.PORT)
    methodend

    method private String getHostName(BBjAdminBase adminBase!)
        declare BBjAdminSet adminSet!
        adminSet! = adminBase!.getServerConfigurations(ServerType.WEB)

        declare BBjAdminServer server!
        server! = cast(BBjAdminServer, adminSet!.iterator().next())

        methodret server!.getString(BBjAdminServer.HOST_NAME)
    methodend

classend

packer! = new ExePacker()
packer!.show()

process_events

release